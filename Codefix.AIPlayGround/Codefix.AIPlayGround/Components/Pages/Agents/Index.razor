@page "/agents"
@using Codefix.AIPlayGround.Models.DTOs
@using Codefix.AIPlayGround.Services
@inject IAgentApiService AgentService
@inject NavigationManager Navigation
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering(true)]

<PageTitle>Agents - AI PlayGround</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h2><i class="bi bi-robot me-2"></i> AI Agents</h2>
                <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/agents/new"))">
                    <i class="bi bi-plus-circle me-2"></i> Create Agent
                </button>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                        <input type="text" class="form-control" placeholder="Search by name..." 
                               @bind="filter.Name" @bind:event="oninput"
                               @onkeyup="OnSearchChanged" />
                    </div>
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="filter.AgentType" @bind:after="OnFilterChanged">
                        <option value="">All Types</option>
                        <option value="LLMAgent">LLM Agent</option>
                        <option value="ToolAgent">Tool Agent</option>
                        <option value="ConditionalAgent">Conditional Agent</option>
                        <option value="ParallelAgent">Parallel Agent</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="filter.Status" @bind:after="OnFilterChanged">
                        <option value="">All Status</option>
                        <option value="Active">Active</option>
                        <option value="Inactive">Inactive</option>
                        <option value="Draft">Draft</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <button class="btn btn-outline-secondary w-100" @onclick="RefreshAgents">
                        <i class="bi bi-arrow-clockwise me-2"></i> Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Agent Cards -->
    @if (isLoading)
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (agents.Any())
    {
        <div class="row g-3">
            @foreach (var agent in agents)
            {
                <div class="col-md-4 col-lg-3">
                    <div class="card h-100" style="cursor: pointer;" @onclick="@(() => Navigation.NavigateTo($"/agents/{agent.Id}"))">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <span class="badge @GetStatusBadgeClass(agent.Status)">@agent.Status</span>
                                <i class="@GetAgentIcon(agent.AgentType) fs-3 text-primary"></i>
                            </div>
                            <h5 class="card-title">@agent.Name</h5>
                            <p class="card-text text-muted small" style="min-height: 40px; overflow: hidden; text-overflow: ellipsis;">
                                @(agent.Description ?? "No description")
                            </p>
                            <div class="d-flex justify-content-between align-items-center mt-3">
                                <small class="text-muted">@agent.AgentType</small>
                                <small class="text-muted">@agent.CreatedAt.ToShortDateString()</small>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        <nav class="mt-4">
            <ul class="pagination justify-content-center">
                <li class="page-item @(filter.Page <= 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="PreviousPage">Previous</button>
                </li>
                <li class="page-item active">
                    <span class="page-link">Page @filter.Page</span>
                </li>
                <li class="page-item @(agents.Count < filter.PageSize ? "disabled" : "")">
                    <button class="page-link" @onclick="NextPage">Next</button>
                </li>
            </ul>
        </nav>
    }
    else
    {
        <div class="card">
            <div class="card-body text-center p-5">
                <i class="bi bi-robot" style="font-size: 64px; color: #6c757d;"></i>
                <h4 class="mt-3">No agents found</h4>
                <p class="text-muted">Create your first agent to get started</p>
                <button class="btn btn-primary mt-3" @onclick="@(() => Navigation.NavigateTo("/agents/create"))">
                    <i class="bi bi-plus-circle me-2"></i> Create Agent
                </button>
            </div>
        </div>
    }
</div>

@code {
    private List<AgentResponse> agents = new();
    private GetAgentsRequest filter = new() { Page = 1, PageSize = 12 };
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadAgents();
    }

    private async Task LoadAgents()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            var result = await AgentService.GetAgentsAsync(filter);
            agents = result.ToList();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnSearchChanged(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            filter.Page = 1;
            await LoadAgents();
        }
    }

    private async Task OnFilterChanged()
    {
        filter.Page = 1;
        await LoadAgents();
    }

    private async Task RefreshAgents()
    {
        await LoadAgents();
    }

    private async Task PreviousPage()
    {
        if (filter.Page > 1)
        {
            filter.Page--;
            await LoadAgents();
        }
    }

    private async Task NextPage()
    {
        filter.Page++;
        await LoadAgents();
    }

    private string GetStatusBadgeClass(string status) => status switch
    {
        "Active" => "bg-success",
        "Inactive" => "bg-warning",
        "Draft" => "bg-secondary",
        _ => "bg-secondary"
    };

    private string GetAgentIcon(string agentType) => agentType switch
    {
        "LLMAgent" => "bi-robot",
        "ToolAgent" => "bi-wrench",
        "ConditionalAgent" => "bi-diagram-2",
        "ParallelAgent" => "bi-arrow-down-up",
        _ => "bi-circle"
    };
}

