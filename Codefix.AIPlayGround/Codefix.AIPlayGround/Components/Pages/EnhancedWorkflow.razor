@page "/enhanced-workflow"
@using Codefix.AIPlayGround.Models
@using Codefix.AIPlayGround.Services
@inject IEnhancedWorkflowService WorkflowService

<PageTitle>Enhanced Agent Workflow Builder</PageTitle>

<div class="enhanced-workflow-page">
    <div class="page-header">
        <h1>ðŸ¤– Enhanced Agent Workflow Builder</h1>
        <p class="lead">Build sophisticated AI agent workflows with drag-and-drop interface</p>
        <div class="header-actions">
            <button class="btn btn-primary" @onclick="CreateNewWorkflow">
                <i class="bi bi-plus-circle"></i> New Workflow
            </button>
            <button class="btn btn-outline-secondary" @onclick="LoadWorkflow">
                <i class="bi bi-folder-open"></i> Load Workflow
            </button>
        </div>
    </div>

    <div class="workflow-container">
        <div class="sidebar">
            <EnhancedNodePalette OnNodeSelected="OnNodeSelected" />
        </div>
        
        <div class="main-content">
            <EnhancedWorkflowCanvas WorkflowId="@currentWorkflowId" OnWorkflowChanged="OnWorkflowChanged" />
        </div>
    </div>
    
    <!-- Workflow List Modal -->
    @if (showWorkflowList)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Select Workflow</h5>
                        <button type="button" class="btn-close" @onclick="CloseWorkflowList"></button>
                    </div>
                    <div class="modal-body">
                        <div class="workflow-list">
                            @if (availableWorkflows.Any())
                            {
                                @foreach (var workflow in availableWorkflows)
                                {
                                    <div class="workflow-item" @onclick="@(() => SelectWorkflow(workflow))">
                                        <div class="workflow-info">
                                            <h6>@workflow.Name</h6>
                                            <p class="text-muted">@workflow.Description</p>
                                            <div class="workflow-meta">
                                                <span class="badge bg-secondary">@workflow.Nodes.Count nodes</span>
                                                <span class="badge bg-info">@workflow.Connections.Count connections</span>
                                                <span class="badge bg-@(workflow.Status == WorkflowStatus.Draft ? "warning" : "success")">@workflow.Status</span>
                                            </div>
                                        </div>
                                        <div class="workflow-actions">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="@(() => SelectWorkflow(workflow))" @onclick:stopPropagation="true">
                                                <i class="bi bi-pencil"></i> Edit
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="@(() => DeleteWorkflow(workflow))" @onclick:stopPropagation="true">
                                                <i class="bi bi-trash"></i> Delete
                                            </button>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="text-center py-4">
                                    <i class="bi bi-folder-x" style="font-size: 48px; color: #6c757d;"></i>
                                    <p class="text-muted mt-2">No workflows found. Create your first workflow to get started!</p>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseWorkflowList">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="CreateNewWorkflow">Create New</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .enhanced-workflow-page {
        height: 100vh;
        display: flex;
        flex-direction: column;
        background: #f8f9fa;
    }

    .page-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        border-radius: 0 0 15px 15px;
        margin-bottom: 20px;
    }

    .page-header h1 {
        margin: 0 0 10px 0;
        font-size: 2rem;
        font-weight: 700;
    }

    .page-header .lead {
        margin: 0 0 20px 0;
        opacity: 0.9;
    }

    .header-actions {
        display: flex;
        gap: 10px;
    }

    .workflow-container {
        flex: 1;
        display: flex;
        gap: 20px;
        padding: 0 20px 20px 20px;
        overflow: hidden;
    }

    .sidebar {
        width: 300px;
        flex-shrink: 0;
    }

    .main-content {
        flex: 1;
        min-width: 0;
    }

    .workflow-list {
        max-height: 400px;
        overflow-y: auto;
    }

    .workflow-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        margin-bottom: 10px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .workflow-item:hover {
        background: #f8f9fa;
        border-color: #007bff;
    }

    .workflow-info h6 {
        margin: 0 0 5px 0;
        font-weight: 600;
    }

    .workflow-info p {
        margin: 0 0 10px 0;
        font-size: 14px;
    }

    .workflow-meta {
        display: flex;
        gap: 5px;
        flex-wrap: wrap;
    }

    .workflow-actions {
        display: flex;
        gap: 5px;
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .workflow-container {
            flex-direction: column;
            padding: 0 10px 10px 10px;
        }
        
        .sidebar {
            width: 100%;
            height: 200px;
        }
        
        .page-header {
            padding: 15px;
        }
        
        .page-header h1 {
            font-size: 1.5rem;
        }
        
        .header-actions {
            flex-direction: column;
        }
    }
</style>

@code {
    private string currentWorkflowId = string.Empty;
    private bool showWorkflowList = false;
    private List<Models.WorkflowDefinition> availableWorkflows = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableWorkflows();
        
        // Create a default workflow if none exist
        if (!availableWorkflows.Any())
        {
            await CreateNewWorkflow();
        }
    }

    private async Task OnNodeSelected(AgentType nodeType)
    {
        // This will be handled by the canvas component
        await Task.CompletedTask;
    }

    private async Task OnWorkflowChanged(Models.WorkflowDefinition workflow)
    {
        currentWorkflowId = workflow.Id;
        await LoadAvailableWorkflows();
        StateHasChanged();
    }

    private async Task CreateNewWorkflow()
    {
        var workflow = await WorkflowService.CreateWorkflowAsync("New Workflow", "A new agent workflow");
        currentWorkflowId = workflow.Id;
        showWorkflowList = false;
        await LoadAvailableWorkflows();
        StateHasChanged();
    }

    private async Task LoadWorkflow()
    {
        await LoadAvailableWorkflows();
        showWorkflowList = true;
        StateHasChanged();
    }

    private async Task SelectWorkflow(Models.WorkflowDefinition workflow)
    {
        currentWorkflowId = workflow.Id;
        showWorkflowList = false;
        StateHasChanged();
    }

    private async Task DeleteWorkflow(Models.WorkflowDefinition workflow)
    {
        await WorkflowService.DeleteWorkflowAsync(workflow.Id);
        await LoadAvailableWorkflows();
        
        // If we deleted the current workflow, create a new one
        if (currentWorkflowId == workflow.Id)
        {
            await CreateNewWorkflow();
        }
        
        StateHasChanged();
    }

    private void CloseWorkflowList()
    {
        showWorkflowList = false;
        StateHasChanged();
    }

    private async Task LoadAvailableWorkflows()
    {
        availableWorkflows = await WorkflowService.GetAllWorkflowsAsync();
    }
}
