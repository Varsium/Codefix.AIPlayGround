@page "/workflows"
@using Codefix.AIPlayGround.Models
@using Codefix.AIPlayGround.Services
@inject IEnhancedWorkflowService WorkflowService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Workflows - AI PlayGround</PageTitle>

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-1">
                        <i class="bi bi-diagram-3 me-2"></i>Workflows
                    </h1>
                    <p class="text-muted mb-0">Create and manage AI agent workflows with visual builder</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary" @onclick="ShowCreateModal">
                        <i class="bi bi-plus-lg me-2"></i>New Workflow
                    </button>
                    <button class="btn btn-primary" @onclick="ShowTemplateModal">
                        <i class="bi bi-layout-text-window me-2"></i>From Template
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Start Templates -->
    <div class="row mb-4">
        <div class="col">
            <h5 class="mb-3">
                <i class="bi bi-lightning me-2"></i>Quick Start Templates
                <span class="badge bg-success ms-2">New!</span>
            </h5>
            <div class="row">
                @foreach (var template in AvailableTemplates?.Take(6) ?? new List<string>())
                {
                    <div class="col-md-4 col-lg-3 mb-3">
                        <div class="card h-100 template-card" @onclick="@(() => CreateFromTemplate(template))">
                            <div class="card-body text-center">
                                <div class="template-icon mb-3">
                                    @GetTemplateIcon(template)
                                </div>
                                <h6 class="card-title">@template</h6>
                                <p class="card-text small text-muted">
                                    @GetTemplateDescription(template)
                                </p>
                            </div>
                            <div class="card-footer bg-transparent">
                                <button class="btn btn-outline-primary btn-sm w-100">
                                    <i class="bi bi-plus-lg me-1"></i>Create
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Existing Workflows -->
    <div class="row">
        <div class="col">
            <h5 class="mb-3">
                <i class="bi bi-collection me-2"></i>Your Workflows
            </h5>
            
            @if (workflows == null)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3 text-muted">Loading workflows...</p>
                </div>
            }
            else if (!workflows.Any())
            {
                <div class="text-center py-5">
                    <i class="bi bi-diagram-3 display-1 text-muted"></i>
                    <h4 class="mt-3">No workflows yet</h4>
                    <p class="text-muted">Create your first workflow to get started</p>
                    <button class="btn btn-primary" @onclick="ShowTemplateModal">
                        <i class="bi bi-layout-text-window me-2"></i>Start with a Template
                    </button>
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var workflow in workflows)
                    {
                        <div class="col-md-6 col-lg-4 mb-3">
                            <div class="card h-100">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <h6 class="card-title mb-0">@workflow.Name</h6>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                                <i class="bi bi-three-dots"></i>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li><a class="dropdown-item" href="/workflows/builder/@workflow.Id">
                                                    <i class="bi bi-pencil me-2"></i>Edit
                                                </a></li>
                                                <li><a class="dropdown-item" href="#" @onclick="@(() => DuplicateWorkflow(workflow.Id))">
                                                    <i class="bi bi-files me-2"></i>Duplicate
                                                </a></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li><a class="dropdown-item text-danger" href="#" @onclick="@(() => DeleteWorkflow(workflow.Id))">
                                                    <i class="bi bi-trash me-2"></i>Delete
                                                </a></li>
                                            </ul>
                                        </div>
                                    </div>
                                    <p class="card-text small text-muted">@workflow.Description</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <small class="text-muted">
                                            <i class="bi bi-circle-fill text-@GetStatusColor(workflow.Status) me-1"></i>
                                            @workflow.Status
                                        </small>
                                        <small class="text-muted">
                                            @workflow.Nodes?.Count nodes
                                        </small>
                                    </div>
                                </div>
                                <div class="card-footer bg-transparent">
                                    <div class="d-flex gap-2">
                                        <a href="/workflows/builder/@workflow.Id" class="btn btn-primary btn-sm flex-fill">
                                            <i class="bi bi-pencil me-1"></i>Edit
                                        </a>
                                        <button class="btn btn-outline-secondary btn-sm" title="View Details">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Create Workflow Modal -->
<div class="modal fade @(showCreateModal ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-plus-lg me-2"></i>Create New Workflow
                </h5>
                <button type="button" class="btn-close" @onclick="HideCreateModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@newWorkflow" OnValidSubmit="CreateWorkflow">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label class="form-label">Name *</label>
                        <InputText class="form-control" @bind-Value="newWorkflow.Name" placeholder="Enter workflow name" />
                        <ValidationMessage For="@(() => newWorkflow.Name)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputTextArea class="form-control" @bind-Value="newWorkflow.Description" 
                                     placeholder="Enter workflow description (optional)" rows="3" />
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideCreateModal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="CreateWorkflow">
                    <i class="bi bi-plus-lg me-1"></i>Create
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Template Selection Modal -->
<div class="modal fade @(showTemplateModal ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-layout-text-window me-2"></i>Create from Template
                </h5>
                <button type="button" class="btn-close" @onclick="HideTemplateModal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                        @foreach (var template in AvailableTemplates ?? new List<string>())
                    {
                        <div class="col-md-6 mb-3">
                            <div class="card template-selection-card" @onclick="@(() => SelectTemplate(template))">
                                <div class="card-body">
                                    <div class="d-flex align-items-center mb-2">
                                        <div class="template-icon me-3">
                                            @GetTemplateIcon(template)
                                        </div>
                                        <div>
                                            <h6 class="card-title mb-0">@template</h6>
                                            <small class="text-muted">@GetTemplateCategory(template)</small>
                                        </div>
                                    </div>
                                    <p class="card-text small">@GetTemplateDescription(template)</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideTemplateModal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<!-- Template Creation Modal -->
<div class="modal fade @(showTemplateCreateModal ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-layout-text-window me-2"></i>Create from Template: @selectedTemplate
                </h5>
                <button type="button" class="btn-close" @onclick="HideTemplateCreateModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@templateWorkflow" OnValidSubmit="CreateFromTemplateForm">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label class="form-label">Name *</label>
                        <InputText class="form-control" @bind-Value="templateWorkflow.Name" placeholder="Enter workflow name" />
                        <ValidationMessage For="@(() => templateWorkflow.Name)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputTextArea class="form-control" @bind-Value="templateWorkflow.Description" 
                                     placeholder="Enter workflow description (optional)" rows="3" />
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideTemplateCreateModal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="CreateFromTemplateForm">
                    <i class="bi bi-plus-lg me-1"></i>Create
                </button>
            </div>
        </div>
    </div>
</div>

<style>
.template-card {
    cursor: pointer;
    transition: transform 0.2s, box-shadow 0.2s;
}

.template-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

.template-selection-card {
    cursor: pointer;
    transition: background-color 0.2s;
}

.template-selection-card:hover {
    background-color: #f8f9fa;
}

.template-icon {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 8px;
    font-size: 1.2rem;
}
</style>

@code {
    private List<Models.WorkflowDefinition>? workflows;
    private List<string> AvailableTemplates = new();
    
    // Modal states
    private bool showCreateModal = false;
    private bool showTemplateModal = false;
    private bool showTemplateCreateModal = false;
    private string selectedTemplate = "";
    
    // Form models
    private CreateWorkflowRequest newWorkflow = new();
    private CreateWorkflowFromTemplateRequest templateWorkflow = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkflows();
        LoadTemplates();
    }

    private async Task LoadWorkflows()
    {
        try
        {
            workflows = await WorkflowService.GetAllWorkflowsAsync();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading workflows: {ex.Message}");
        }
    }

    private void LoadTemplates()
    {
        try
        {
            AvailableTemplates = WorkflowService.GetAvailableTemplates() ?? new List<string>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading templates: {ex.Message}");
            AvailableTemplates = new List<string>();
        }
    }

    private void ShowCreateModal()
    {
        newWorkflow = new CreateWorkflowRequest();
        showCreateModal = true;
    }

    private void HideCreateModal()
    {
        showCreateModal = false;
    }

    private void ShowTemplateModal()
    {
        showTemplateModal = true;
    }

    private void HideTemplateModal()
    {
        showTemplateModal = false;
    }

    private void SelectTemplate(string template)
    {
        selectedTemplate = template;
        templateWorkflow = new CreateWorkflowFromTemplateRequest 
        { 
            TemplateName = template,
            Name = $"{template} - {DateTime.Now:yyyy-MM-dd}"
        };
        showTemplateModal = false;
        showTemplateCreateModal = true;
    }

    private void HideTemplateCreateModal()
    {
        showTemplateCreateModal = false;
        selectedTemplate = "";
    }

    private async Task CreateWorkflow()
    {
        try
        {
            var workflow = await WorkflowService.CreateWorkflowAsync(newWorkflow.Name, newWorkflow.Description);
            HideCreateModal();
            await LoadWorkflows();
            Navigation.NavigateTo($"/workflows/builder/{workflow.Id}");
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error creating workflow: {ex.Message}");
        }
    }

    private async Task CreateFromTemplate(string templateName)
    {
        try
        {
            var workflow = await WorkflowService.CreateWorkflowFromTemplateAsync(
                templateName, 
                $"{templateName} - {DateTime.Now:yyyy-MM-dd}", 
                $"Created from {templateName} template");
            
            await LoadWorkflows();
            Navigation.NavigateTo($"/workflows/builder/{workflow.Id}");
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error creating workflow from template: {ex.Message}");
        }
    }

    private async Task CreateFromTemplateForm()
    {
        try
        {
            var workflow = await WorkflowService.CreateWorkflowFromTemplateAsync(
                templateWorkflow.TemplateName, 
                templateWorkflow.Name, 
                templateWorkflow.Description);
            
            HideTemplateCreateModal();
            await LoadWorkflows();
            Navigation.NavigateTo($"/workflows/builder/{workflow.Id}");
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error creating workflow from template: {ex.Message}");
        }
    }

    private string? workflowToDelete;
    private bool showDeleteModal = false;

    private void DeleteWorkflow(string workflowId)
    {
        workflowToDelete = workflowId;
        showDeleteModal = true;
    }

    private async Task ConfirmDeleteWorkflow()
    {
        if (!string.IsNullOrEmpty(workflowToDelete))
        {
            try
            {
                await WorkflowService.DeleteWorkflowAsync(workflowToDelete);
                await LoadWorkflows();
                showDeleteModal = false;
                workflowToDelete = null;
            }
            catch (Exception ex)
            {
                // Handle error
                Console.WriteLine($"Error deleting workflow: {ex.Message}");
            }
        }
    }

    private void CancelDeleteWorkflow()
    {
        showDeleteModal = false;
        workflowToDelete = null;
    }

    private async Task DuplicateWorkflow(string workflowId)
    {
        try
        {
            var workflow = await WorkflowService.GetWorkflowAsync(workflowId);
            var duplicatedWorkflow = await WorkflowService.CreateWorkflowAsync(
                $"{workflow.Name} - Copy", 
                workflow.Description);
            
            await LoadWorkflows();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error duplicating workflow: {ex.Message}");
        }
    }

    private string GetTemplateIcon(string template)
    {
        if (string.IsNullOrEmpty(template))
            return "<i class='bi bi-diagram-3'></i>";
            
        return template switch
        {
            var t when t.Contains("Greenfield Service") => "<i class='bi bi-server'></i>",
            var t when t.Contains("Greenfield Fullstack") => "<i class='bi bi-layers'></i>",
            var t when t.Contains("Greenfield UI") => "<i class='bi bi-display'></i>",
            var t when t.Contains("Brownfield Service") => "<i class='bi bi-tools'></i>",
            var t when t.Contains("Brownfield Fullstack") => "<i class='bi bi-wrench'></i>",
            var t when t.Contains("Brownfield UI") => "<i class='bi bi-paint-bucket'></i>",
            var t when t.Contains("Sequential") => "<i class='bi bi-arrow-right'></i>",
            var t when t.Contains("Parallel") => "<i class='bi bi-diagram-2'></i>",
            var t when t.Contains("Conditional") => "<i class='bi bi-diagram-3'></i>",
            _ => "<i class='bi bi-diagram-3'></i>"
        };
    }

    private string GetTemplateCategory(string template)
    {
        return template switch
        {
            var t when t.Contains("Greenfield") => "New Project",
            var t when t.Contains("Brownfield") => "Enhancement",
            var t when t.Contains("Sequential") => "Basic",
            var t when t.Contains("Parallel") => "Advanced",
            var t when t.Contains("Conditional") => "Advanced",
            _ => "Custom"
        };
    }

    private string GetTemplateDescription(string template)
    {
        return template switch
        {
            "Greenfield Service Development" => "Complete workflow for building new backend services",
            "Greenfield Fullstack Development" => "Full-stack application development workflow",
            "Greenfield UI Development" => "Frontend application development workflow",
            "Brownfield Service Enhancement" => "Enhance existing backend services",
            "Brownfield Fullstack Enhancement" => "Enhance existing full-stack applications",
            "Brownfield UI Enhancement" => "Enhance existing frontend applications",
            "Simple Sequential Workflow" => "Basic sequential workflow template",
            "Parallel Processing Workflow" => "Advanced parallel processing workflow",
            "Conditional Decision Workflow" => "Workflow with conditional branching",
            _ => "Custom workflow template"
        };
    }

    private string GetStatusColor(WorkflowStatus status)
    {
        return status switch
        {
            WorkflowStatus.Draft => "warning",
            WorkflowStatus.Published => "success",
            WorkflowStatus.Running => "primary",
            WorkflowStatus.Completed => "info",
            WorkflowStatus.Failed => "danger",
            WorkflowStatus.Paused => "warning",
            WorkflowStatus.Archived => "secondary",
            _ => "secondary"
        };
    }

    public class CreateWorkflowRequest
    {
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
    }

    public class CreateWorkflowFromTemplateRequest
    {
        public string TemplateName { get; set; } = "";
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
    }
}

<!-- Delete Confirmation Modal -->
<div class="modal fade @(showDeleteModal ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-exclamation-triangle text-warning me-2"></i>Delete Workflow
                </h5>
                <button type="button" class="btn-close" @onclick="CancelDeleteWorkflow"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this workflow?</p>
                <p class="text-muted small">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CancelDeleteWorkflow">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteWorkflow">
                    <i class="bi bi-trash me-1"></i>Delete
                </button>
            </div>
        </div>
    </div>
</div>
