@page "/workflow-overview"
@using Codefix.AIPlayGround.Models
@using Codefix.AIPlayGround.Services
@inject IEnhancedWorkflowService WorkflowService
@inject NavigationManager NavigationManager

<PageTitle>Workflow Overview</PageTitle>

<div class="workflow-overview-page">
    <div class="page-header">
        <div class="header-content">
            <h1>ðŸ“Š Workflow Overview</h1>
            <p class="lead">Manage and monitor all your AI agent workflows</p>
        </div>
        <div class="header-actions">
            <button class="btn btn-primary" @onclick="CreateNewWorkflow">
                <i class="bi bi-plus-circle"></i> New Workflow
            </button>
            <button class="btn btn-secondary" @onclick="RefreshWorkflows">
                <i class="bi bi-arrow-clockwise"></i> Refresh
            </button>
        </div>
    </div>

    <div class="workflow-stats">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <div class="stat-item">
                            <div class="stat-icon total">
                                <i class="bi bi-diagram-3"></i>
                            </div>
                            <div class="stat-content">
                                <div class="stat-value">@totalWorkflows</div>
                                <div class="stat-label">Total Workflows</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-item">
                            <div class="stat-icon active">
                                <i class="bi bi-play-circle"></i>
                            </div>
                            <div class="stat-content">
                                <div class="stat-value">@activeWorkflows</div>
                                <div class="stat-label">Active</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-item">
                            <div class="stat-icon draft">
                                <i class="bi bi-pencil"></i>
                            </div>
                            <div class="stat-content">
                                <div class="stat-value">@draftWorkflows</div>
                                <div class="stat-label">Draft</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-item">
                            <div class="stat-icon completed">
                                <i class="bi bi-check-circle"></i>
                            </div>
                            <div class="stat-content">
                                <div class="stat-value">@completedWorkflows</div>
                                <div class="stat-label">Completed</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="workflow-filters">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <div class="mb-3">
                            <label class="form-label">Search</label>
                            <input type="text" class="form-control" @bind="searchTerm" placeholder="Search workflows..." />
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" @bind="statusFilter">
                                <option value="">All Statuses</option>
                                <option value="@WorkflowStatus.Draft">Draft</option>
                                <option value="@WorkflowStatus.Running">Running</option>
                                <option value="@WorkflowStatus.Completed">Completed</option>
                                <option value="@WorkflowStatus.Archived">Archived</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="mb-3">
                            <label class="form-label">Sort By</label>
                            <select class="form-select" @bind="sortBy">
                                <option value="name">Name</option>
                                <option value="created">Created Date</option>
                                <option value="updated">Last Updated</option>
                                <option value="status">Status</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="mb-3">
                            <label class="form-label">&nbsp;</label>
                            <button class="btn btn-info w-100" @onclick="ClearFilters">
                                <i class="bi bi-funnel"></i> Clear Filters
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="workflow-list">
        <div class="card">
            <div class="card-body">
                @if (filteredWorkflows.Any())
                {
                    <div class="workflow-grid">
                        @foreach (var workflow in filteredWorkflows)
                        {
                            <div class="workflow-card card">
                                <div class="card-body">
                                    <div class="workflow-header">
                                        <div class="workflow-title">
                                            <h5>@workflow.Name</h5>
                                            <span class="badge bg-@GetStatusColor(workflow.Status)">@workflow.Status</span>
                                        </div>
                                        <div class="dropdown">
                                            <button class="btn btn-light btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                                <i class="bi bi-three-dots"></i>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li><a class="dropdown-item" href="#" @onclick="@(() => EditWorkflow(workflow))">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </a></li>
                                                <li><a class="dropdown-item" href="#" @onclick="@(() => DuplicateWorkflow(workflow))">
                                                    <i class="bi bi-copy"></i> Duplicate
                                                </a></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li><a class="dropdown-item text-danger" href="#" @onclick="@(() => DeleteWorkflow(workflow))">
                                                    <i class="bi bi-trash"></i> Delete
                                                </a></li>
                                            </ul>
                                        </div>
                                    </div>
                                    
                                    <p class="workflow-description">@workflow.Description</p>
                                    
                                    <div class="workflow-meta">
                                        <div class="meta-item">
                                            <i class="bi bi-diagram-3"></i>
                                            <span>@workflow.Nodes.Count nodes</span>
                                        </div>
                                        <div class="meta-item">
                                            <i class="bi bi-arrow-right"></i>
                                            <span>@workflow.Connections.Count connections</span>
                                        </div>
                                        <div class="meta-item">
                                            <i class="bi bi-calendar"></i>
                                            <span>@workflow.CreatedAt.ToString("MMM dd, yyyy")</span>
                                        </div>
                                    </div>
                                    
                                    <div class="workflow-actions">
                                        <button class="btn btn-primary btn-sm" @onclick="@(() => EditWorkflow(workflow))">
                                            <i class="bi bi-pencil"></i> Edit
                                        </button>
                                        <button class="btn btn-success btn-sm" @onclick="@(() => RunWorkflow(workflow))">
                                            <i class="bi bi-play"></i> Run
                                        </button>
                                        <button class="btn btn-info btn-sm" @onclick="@(() => ViewWorkflow(workflow))">
                                            <i class="bi bi-eye"></i> View
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <i class="bi bi-folder-x" style="font-size: 48px; color: #6c757d;"></i>
                        <h4>No workflows found</h4>
                        <p>@(workflows.Any() ? "Try adjusting your filters or search terms." : "Create your first workflow to get started!")</p>
                        @if (!workflows.Any())
                        {
                            <button class="btn btn-primary" @onclick="CreateNewWorkflow">
                                <i class="bi bi-plus"></i> Create Your First Workflow
                            </button>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    .workflow-overview-page {
        padding: 20px;
        background: #f8f9fa;
        min-height: 100vh;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding: 30px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 15px;
        color: white;
    }

    .page-header h1 {
        margin: 0 0 10px 0;
        font-size: 2.5rem;
        font-weight: 700;
    }

    .page-header .lead {
        margin: 0;
        opacity: 0.9;
        font-size: 1.1rem;
    }

    .header-actions {
        display: flex;
        gap: 10px;
    }

    .workflow-stats {
        margin-bottom: 30px;
    }

    .stat-item {
        display: flex;
        align-items: center;
        padding: 20px;
    }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 20px;
        font-size: 24px;
        color: white;
    }

    .stat-icon.total {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .stat-icon.active {
        background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
    }

    .stat-icon.draft {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    }

    .stat-icon.completed {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    }

    .stat-value {
        font-size: 2rem;
        font-weight: 700;
        color: #2c3e50;
        line-height: 1;
    }

    .stat-label {
        font-size: 0.9rem;
        color: #6c757d;
        margin-top: 5px;
    }

    .workflow-filters {
        margin-bottom: 30px;
    }

    .workflow-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 20px;
    }

    .workflow-card {
        transition: all 0.3s ease;
        border: 1px solid #e9ecef;
    }

    .workflow-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }

    .workflow-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 15px;
    }

    .workflow-title {
        flex: 1;
    }

    .workflow-title h5 {
        margin: 0 0 8px 0;
        font-weight: 600;
        color: #2c3e50;
    }

    .workflow-description {
        color: #6c757d;
        margin-bottom: 20px;
        font-size: 0.9rem;
        line-height: 1.5;
    }

    .workflow-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        margin-bottom: 20px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 5px;
        font-size: 0.85rem;
        color: #6c757d;
    }

    .workflow-actions {
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #6c757d;
    }

    .empty-state h4 {
        margin: 20px 0 10px 0;
        color: #495057;
    }

    .empty-state p {
        margin-bottom: 30px;
        font-size: 1.1rem;
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .page-header {
            flex-direction: column;
            text-align: center;
            gap: 20px;
        }

        .workflow-grid {
            grid-template-columns: 1fr;
        }

        .workflow-meta {
            flex-direction: column;
            gap: 10px;
        }

        .workflow-actions {
            justify-content: center;
        }
    }
</style>

@code {
    private List<Models.WorkflowDefinition> workflows = new();
    private List<Models.WorkflowDefinition> filteredWorkflows = new();
    private string searchTerm = string.Empty;
    private WorkflowStatus? statusFilter;
    private string sortBy = "name";

    private int totalWorkflows => workflows.Count;
    private int activeWorkflows => workflows.Count(w => w.Status == WorkflowStatus.Running);
    private int draftWorkflows => workflows.Count(w => w.Status == WorkflowStatus.Draft);
    private int completedWorkflows => workflows.Count(w => w.Status == WorkflowStatus.Completed);

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkflows();
    }

    private async Task LoadWorkflows()
    {
        workflows = await WorkflowService.GetAllWorkflowsAsync();
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        var query = workflows.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            query = query.Where(w => 
                w.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                w.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // Apply status filter
        if (statusFilter.HasValue)
        {
            query = query.Where(w => w.Status == statusFilter.Value);
        }

        // Apply sorting
        query = sortBy switch
        {
            "name" => query.OrderBy(w => w.Name),
            "created" => query.OrderByDescending(w => w.CreatedAt),
            "updated" => query.OrderByDescending(w => w.UpdatedAt),
            "status" => query.OrderBy(w => w.Status),
            _ => query.OrderBy(w => w.Name)
        };

        filteredWorkflows = query.ToList();
        StateHasChanged();
    }

    private async Task RefreshWorkflows()
    {
        await WorkflowService.ReloadWorkflowsAsync();
        await LoadWorkflows();
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        statusFilter = null;
        sortBy = "name";
        ApplyFilters();
    }

    private async Task CreateNewWorkflow()
    {
        NavigationManager.NavigateTo("/enhanced-workflow");
    }

    private async Task EditWorkflow(Models.WorkflowDefinition workflow)
    {
        NavigationManager.NavigateTo($"/enhanced-workflow?workflowId={workflow.Id}");
    }

    private async Task ViewWorkflow(Models.WorkflowDefinition workflow)
    {
        // Navigate to a read-only view of the workflow
        NavigationManager.NavigateTo($"/workflow-view/{workflow.Id}");
    }

    private async Task DuplicateWorkflow(Models.WorkflowDefinition workflow)
    {
        var newWorkflow = await WorkflowService.CreateWorkflowAsync(
            $"{workflow.Name} (Copy)", 
            workflow.Description);
        
        // Copy nodes and connections
        foreach (var node in workflow.Nodes)
        {
            if (Enum.TryParse<AgentType>(node.Type, out var agentType))
            {
                await WorkflowService.AddNodeAsync(newWorkflow.Id, agentType, node.X, node.Y);
            }
        }
        
        foreach (var connection in workflow.Connections)
        {
            await WorkflowService.AddConnectionAsync(newWorkflow.Id, connection.FromNodeId, connection.ToNodeId);
        }
        
        await LoadWorkflows();
    }

    private async Task DeleteWorkflow(Models.WorkflowDefinition workflow)
    { 
        await WorkflowService.DeleteWorkflowAsync(workflow.Id);
        await LoadWorkflows();
    }

    private async Task RunWorkflow(Models.WorkflowDefinition workflow)
    {
        // Implement workflow execution
        // This would typically start the workflow execution
        await Task.CompletedTask;
    }

    private string GetStatusColor(WorkflowStatus status)
    {
        return status switch
        {
            WorkflowStatus.Draft => "warning",
            WorkflowStatus.Running => "success",
            WorkflowStatus.Completed => "info",
            WorkflowStatus.Archived => "secondary",
            _ => "light"
        };
    }
}