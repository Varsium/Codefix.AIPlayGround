@using Codefix.AIPlayGround.Services
@using Microsoft.Extensions.AI
@inject IAgentVisualizationService VisualizationService
@inject IJSRuntime JSRuntime

<div class="agent-management-ui">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4>🤖 Agent Development UI</h4>
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-outline-success" @onclick="CreateNewAgent">
                            <i class="bi bi-plus-circle"></i> New Agent
                        </button>
                        <button type="button" class="btn btn-outline-primary" @onclick="SaveConfiguration">
                            <i class="bi bi-save"></i> Save Config
                        </button>
                        <button type="button" class="btn btn-outline-info" @onclick="TestAgents">
                            <i class="bi bi-play-circle"></i> Test Agents
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <h5>Agent Library</h5>
                            <div class="agent-list">
                                @foreach (var agent in agents)
                                {
                                    <div class="agent-item @(selectedAgent?.Id == agent.Id ? "selected" : "")" 
                                         @onclick="() => SelectAgent(agent)">
                                        <div class="agent-header">
                                            <span class="agent-icon">@GetAgentIcon(agent.Type)</span>
                                            <span class="agent-name">@agent.Name</span>
                                            <span class="agent-status @agent.Status.ToLower()">@agent.Status</span>
                                        </div>
                                        <div class="agent-description">@agent.Description</div>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="col-md-8">
                            @if (selectedAgent != null)
                            {
                                <div class="agent-editor">
                                    <h5>Agent Configuration - @selectedAgent.Name</h5>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Agent Name</label>
                                                <input type="text" class="form-control" @bind="selectedAgent.Name" />
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Agent Type</label>
                                                <select class="form-select" @bind="selectedAgent.Type">
                                                    <option value="research">Research Agent</option>
                                                    <option value="analysis">Analysis Agent</option>
                                                    <option value="decision">Decision Agent</option>
                                                    <option value="execution">Execution Agent</option>
                                                    <option value="monitoring">Monitoring Agent</option>
                                                </select>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Status</label>
                                                <select class="form-select" @bind="selectedAgent.Status">
                                                    <option value="Active">Active</option>
                                                    <option value="Inactive">Inactive</option>
                                                    <option value="Testing">Testing</option>
                                                    <option value="Error">Error</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Description</label>
                                                <textarea class="form-control" rows="3" @bind="selectedAgent.Description"></textarea>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Capabilities</label>
                                                <div class="capabilities-list">
                                                    @for (int i = 0; i < selectedAgent.Capabilities.Count; i++)
                                                    {
                                                        var index = i;
                                                        <div class="capability-item">
                                                            <input type="text" class="form-control form-control-sm" @bind="selectedAgent.Capabilities[index]" />
                                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveCapability(selectedAgent.Capabilities[index])">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        </div>
                                                    }
                                                    <button class="btn btn-sm btn-outline-success" @onclick="AddCapability">
                                                        <i class="bi bi-plus"></i> Add Capability
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="row">
                                        <div class="col-12">
                                            <h6>Agent Configuration (JSON)</h6>
                                            <textarea class="form-control" rows="8" @bind="selectedAgent.Configuration" 
                                                      placeholder="Enter JSON configuration for this agent"></textarea>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-5 text-muted">
                                    <i class="bi bi-robot display-4"></i>
                                    <p class="mt-2">Select an agent from the library to configure it.</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>🔄 Agent Workflow Orchestration</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Active Workflows</h6>
                            <div class="workflow-list">
                                @foreach (var workflow in activeWorkflows)
                                {
                                    <div class="workflow-item">
                                        <div class="workflow-header">
                                            <span class="workflow-name">@workflow.Name</span>
                                            <span class="workflow-status @workflow.Status.ToLower()">@workflow.Status</span>
                                        </div>
                                        <div class="workflow-actions">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewWorkflow(workflow)">
                                                <i class="bi bi-eye"></i> View
                                            </button>
                                            <button class="btn btn-sm btn-outline-success" @onclick="() => StartWorkflow(workflow)">
                                                <i class="bi bi-play"></i> Start
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => StopWorkflow(workflow)">
                                                <i class="bi bi-stop"></i> Stop
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6>Agent Performance</h6>
                            <div class="performance-metrics">
                                <div class="metric-item">
                                    <span class="metric-label">Total Agents:</span>
                                    <span class="metric-value">@agents.Count</span>
                                </div>
                                <div class="metric-item">
                                    <span class="metric-label">Active Agents:</span>
                                    <span class="metric-value">@agents.Count(a => a.Status == "Active")</span>
                                </div>
                                <div class="metric-item">
                                    <span class="metric-label">Running Workflows:</span>
                                    <span class="metric-value">@activeWorkflows.Count(w => w.Status == "Running")</span>
                                </div>
                                <div class="metric-item">
                                    <span class="metric-label">Success Rate:</span>
                                    <span class="metric-value">@(successRate.ToString("F1"))%</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .agent-devui {
        padding: 20px;
    }

    .agent-list {
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 10px;
    }

    .agent-item {
        padding: 10px;
        border: 1px solid #dee2e6;
        border-radius: 6px;
        margin-bottom: 8px;
        cursor: pointer;
        transition: all 0.2s;
    }

    .agent-item:hover {
        background-color: #f8f9fa;
        border-color: #007bff;
    }

    .agent-item.selected {
        background-color: #e3f2fd;
        border-color: #2196f3;
    }

    .agent-header {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
    }

    .agent-icon {
        font-size: 20px;
        margin-right: 8px;
    }

    .agent-name {
        font-weight: 500;
        flex: 1;
    }

    .agent-status {
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
    }

    .agent-status.active {
        background-color: #d4edda;
        color: #155724;
    }

    .agent-status.inactive {
        background-color: #f8d7da;
        color: #721c24;
    }

    .agent-status.testing {
        background-color: #fff3cd;
        color: #856404;
    }

    .agent-status.error {
        background-color: #f8d7da;
        color: #721c24;
    }

    .agent-description {
        font-size: 14px;
        color: #6c757d;
    }

    .agent-editor {
        padding: 20px;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        background-color: #f8f9fa;
    }

    .capabilities-list {
        max-height: 200px;
        overflow-y: auto;
    }

    .capability-item {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
    }

    .capability-item input {
        flex: 1;
        margin-right: 8px;
    }

    .workflow-list {
        max-height: 300px;
        overflow-y: auto;
    }

    .workflow-item {
        padding: 10px;
        border: 1px solid #dee2e6;
        border-radius: 6px;
        margin-bottom: 8px;
    }

    .workflow-header {
        display: flex;
        justify-content: between;
        align-items: center;
        margin-bottom: 8px;
    }

    .workflow-name {
        font-weight: 500;
        flex: 1;
    }

    .workflow-status {
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
    }

    .workflow-status.running {
        background-color: #d4edda;
        color: #155724;
    }

    .workflow-status.stopped {
        background-color: #f8d7da;
        color: #721c24;
    }

    .workflow-status.pending {
        background-color: #fff3cd;
        color: #856404;
    }

    .workflow-actions {
        display: flex;
        gap: 5px;
    }

    .performance-metrics {
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
    }

    .metric-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 0;
        border-bottom: 1px solid #dee2e6;
    }

    .metric-item:last-child {
        border-bottom: none;
    }

    .metric-label {
        font-weight: 500;
    }

    .metric-value {
        font-weight: bold;
        color: #007bff;
    }
</style>

@code {
    private List<AgentDefinition> agents = new();
    private List<WorkflowDefinition> activeWorkflows = new();
    private AgentDefinition? selectedAgent;
    private double successRate = 85.5;

    public class AgentDefinition
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Name { get; set; } = string.Empty;
        public string Type { get; set; } = "research";
        public string Status { get; set; } = "Inactive";
        public string Description { get; set; } = string.Empty;
        public List<string> Capabilities { get; set; } = new();
        public string Configuration { get; set; } = "{}";
    }

    public class WorkflowDefinition
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Name { get; set; } = string.Empty;
        public string Status { get; set; } = "Stopped";
        public List<string> AgentIds { get; set; } = new();
    }

    protected override void OnInitialized()
    {
        LoadSampleAgents();
        LoadSampleWorkflows();
    }

    private void LoadSampleAgents()
    {
        agents = new List<AgentDefinition>
        {
            new()
            {
                Name = "Research Agent",
                Type = "research",
                Status = "Active",
                Description = "Conducts research and gathers information from various sources",
                Capabilities = new List<string> { "Web Search", "Document Analysis", "Data Collection" },
                Configuration = """{"model": "gpt-4", "temperature": 0.7, "max_tokens": 2000}"""
            },
            new()
            {
                Name = "Analysis Agent",
                Type = "analysis",
                Status = "Active",
                Description = "Analyzes data and provides insights and recommendations",
                Capabilities = new List<string> { "Data Analysis", "Pattern Recognition", "Report Generation" },
                Configuration = """{"model": "gpt-4", "temperature": 0.3, "max_tokens": 1500}"""
            },
            new()
            {
                Name = "Decision Agent",
                Type = "decision",
                Status = "Testing",
                Description = "Makes decisions based on analysis and predefined criteria",
                Capabilities = new List<string> { "Decision Making", "Risk Assessment", "Strategy Planning" },
                Configuration = """{"model": "gpt-4", "temperature": 0.1, "max_tokens": 1000}"""
            }
        };
    }

    private void LoadSampleWorkflows()
    {
        activeWorkflows = new List<WorkflowDefinition>
        {
            new()
            {
                Name = "Research & Analysis Pipeline",
                Status = "Running",
                AgentIds = new List<string> { agents[0].Id, agents[1].Id }
            },
            new()
            {
                Name = "Decision Support System",
                Status = "Stopped",
                AgentIds = new List<string> { agents[1].Id, agents[2].Id }
            }
        };
    }

    private void SelectAgent(AgentDefinition agent)
    {
        selectedAgent = agent;
        StateHasChanged();
    }

    private void CreateNewAgent()
    {
        var newAgent = new AgentDefinition
        {
            Name = "New Agent",
            Type = "research",
            Status = "Inactive",
            Description = "A new agent ready for configuration",
            Capabilities = new List<string> { "Basic Processing" },
            Configuration = """{"model": "gpt-4", "temperature": 0.7}"""
        };
        
        agents.Add(newAgent);
        selectedAgent = newAgent;
        StateHasChanged();
    }

    private void AddCapability()
    {
        if (selectedAgent != null)
        {
            selectedAgent.Capabilities.Add("New Capability");
            StateHasChanged();
        }
    }

    private void RemoveCapability(string capability)
    {
        if (selectedAgent != null)
        {
            selectedAgent.Capabilities.Remove(capability);
            StateHasChanged();
        }
    }

    private void SaveConfiguration()
    {
        // Save agent configuration
        _ = JSRuntime.InvokeVoidAsync("alert", "Agent configuration saved successfully!");
    }

    private void TestAgents()
    {
        // Test agent functionality
        _ = JSRuntime.InvokeVoidAsync("alert", "Starting agent tests...");
    }

    private void ViewWorkflow(WorkflowDefinition workflow)
    {
        // Navigate to workflow view
        _ = JSRuntime.InvokeVoidAsync("alert", $"Viewing workflow: {workflow.Name}");
    }

    private void StartWorkflow(WorkflowDefinition workflow)
    {
        workflow.Status = "Running";
        StateHasChanged();
    }

    private void StopWorkflow(WorkflowDefinition workflow)
    {
        workflow.Status = "Stopped";
        StateHasChanged();
    }

    private string GetAgentIcon(string agentType)
    {
        return agentType switch
        {
            "research" => "🔍",
            "analysis" => "📊",
            "decision" => "🎯",
            "execution" => "⚡",
            "monitoring" => "👁️",
            _ => "🤖"
        };
    }
}
