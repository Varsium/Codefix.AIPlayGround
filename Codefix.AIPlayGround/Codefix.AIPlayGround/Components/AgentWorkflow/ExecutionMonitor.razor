@using Codefix.AIPlayGround.Models

<div class="execution-monitor">
    <div class="monitor-header">
        <h6><i class="bi bi-play-circle me-2"></i>Execution Monitor</h6>
        <div class="execution-controls">
            <button class="btn btn-sm btn-outline-secondary" @onclick="ClearLogs">
                <i class="bi bi-trash"></i>
            </button>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ExportLogs">
                <i class="bi bi-download"></i>
            </button>
        </div>
    </div>

    <div class="monitor-content">
        <!-- Execution Timeline -->
        <div class="timeline-section">
            <h6 class="section-title">
                <i class="bi bi-clock-history me-2"></i>Execution Timeline
            </h6>
            <div class="timeline">
                @foreach (var step in GetExecutionSteps())
                {
                    <div class="timeline-item @GetStepClass(step)">
                        <div class="timeline-marker">
                            <i class="bi @GetStepIcon(step.Status)"></i>
                        </div>
                        <div class="timeline-content">
                            <div class="step-header">
                                <span class="step-name">@step.NodeName</span>
                                <span class="step-time">@step.Timestamp.ToString("HH:mm:ss.fff")</span>
                            </div>
                            <div class="step-details">
                                <span class="step-status">@step.Status</span>
                                @if (step.Duration.HasValue)
                                {
                                    <span class="step-duration">@step.Duration.Value.TotalMilliseconds.ToString("F0")ms</span>
                                }
                            </div>
                            @if (!string.IsNullOrEmpty(step.Message))
                            {
                                <div class="step-message">@step.Message</div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Current Execution State -->
        <div class="state-section">
            <h6 class="section-title">
                <i class="bi bi-gear me-2"></i>Current State
            </h6>
            <div class="state-grid">
                <div class="state-item">
                    <span class="state-label">Current Step:</span>
                    <span class="state-value">@GetCurrentStep()</span>
                </div>
                <div class="state-item">
                    <span class="state-label">Total Steps:</span>
                    <span class="state-value">@GetTotalSteps()</span>
                </div>
                <div class="state-item">
                    <span class="state-label">Progress:</span>
                    <span class="state-value">@GetProgress()%</span>
                </div>
                <div class="state-item">
                    <span class="state-label">Elapsed Time:</span>
                    <span class="state-value">@GetElapsedTime()</span>
                </div>
                <div class="state-item">
                    <span class="state-label">Status:</span>
                    <span class="state-value status-@GetExecutionStatus().ToLower()">@GetExecutionStatus()</span>
                </div>
                <div class="state-item">
                    <span class="state-label">Errors:</span>
                    <span class="state-value error-count">@GetErrorCount()</span>
                </div>
            </div>
        </div>

        <!-- Performance Metrics -->
        <div class="metrics-section">
            <h6 class="section-title">
                <i class="bi bi-speedometer2 me-2"></i>Performance
            </h6>
            <div class="metrics-grid">
                <div class="metric-item">
                    <div class="metric-label">CPU Usage</div>
                    <div class="metric-value">@GetCpuUsage()%</div>
                    <div class="metric-bar">
                        <div class="metric-fill" style="width: @GetCpuUsage()%"></div>
                    </div>
                </div>
                <div class="metric-item">
                    <div class="metric-label">Memory Usage</div>
                    <div class="metric-value">@GetMemoryUsage()</div>
                    <div class="metric-bar">
                        <div class="metric-fill" style="width: @GetMemoryUsagePercent()%"></div>
                    </div>
                </div>
                <div class="metric-item">
                    <div class="metric-label">Token Rate</div>
                    <div class="metric-value">@GetTokenRate()/s</div>
                    <div class="metric-bar">
                        <div class="metric-fill" style="width: @GetTokenRatePercent()%"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .execution-monitor {
        height: 100%;
        display: flex;
        flex-direction: column;
        background: #252526;
        color: #cccccc;
    }

    .monitor-header {
        padding: 12px 16px;
        border-bottom: 1px solid #3e3e42;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .monitor-header h6 {
        margin: 0;
        font-size: 14px;
        font-weight: 600;
        color: #ffffff;
    }

    .execution-controls {
        display: flex;
        gap: 4px;
    }

    .monitor-content {
        flex: 1;
        overflow: auto;
        padding: 8px 0;
    }

    .timeline-section, .state-section, .metrics-section {
        margin-bottom: 16px;
    }

    .section-title {
        padding: 8px 16px;
        margin: 0;
        font-size: 12px;
        font-weight: 600;
        color: #0078d4;
        background: #2d2d30;
        border-bottom: 1px solid #3e3e42;
    }

    .timeline {
        padding: 0 16px;
        position: relative;
    }

    .timeline::before {
        content: '';
        position: absolute;
        left: 20px;
        top: 0;
        bottom: 0;
        width: 2px;
        background: #3e3e42;
    }

    .timeline-item {
        position: relative;
        padding: 8px 0 8px 40px;
        border-bottom: 1px solid #3e3e42;
    }

    .timeline-item:last-child {
        border-bottom: none;
    }

    .timeline-marker {
        position: absolute;
        left: 12px;
        top: 12px;
        width: 16px;
        height: 16px;
        border-radius: 50%;
        background: #3e3e42;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 10px;
    }

    .timeline-item.running .timeline-marker {
        background: #28a745;
        animation: pulse 1s infinite;
    }

    .timeline-item.completed .timeline-marker {
        background: #17a2b8;
    }

    .timeline-item.error .timeline-marker {
        background: #dc3545;
    }

    @@keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
    }

    .timeline-content {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .step-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .step-name {
        font-weight: 600;
        font-size: 13px;
        color: #ffffff;
    }

    .step-time {
        font-size: 11px;
        color: #888888;
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
    }

    .step-details {
        display: flex;
        gap: 12px;
        font-size: 12px;
    }

    .step-status {
        color: #0078d4;
        font-weight: 500;
    }

    .step-duration {
        color: #888888;
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
    }

    .step-message {
        font-size: 11px;
        color: #cccccc;
        background: #1e1e1e;
        padding: 4px 8px;
        border-radius: 4px;
        margin-top: 4px;
    }

    .state-grid {
        padding: 0 16px;
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 8px;
    }

    .state-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 6px 0;
        border-bottom: 1px solid #3e3e42;
    }

    .state-item:last-child {
        border-bottom: none;
    }

    .state-label {
        font-size: 12px;
        color: #cccccc;
    }

    .state-value {
        font-size: 12px;
        color: #ffffff;
        font-weight: 500;
    }

    .status-running {
        color: #28a745;
    }

    .status-paused {
        color: #ffc107;
    }

    .status-completed {
        color: #17a2b8;
    }

    .status-error {
        color: #dc3545;
    }

    .error-count {
        color: #dc3545;
    }

    .metrics-grid {
        padding: 0 16px;
    }

    .metric-item {
        margin-bottom: 12px;
    }

    .metric-label {
        font-size: 12px;
        color: #cccccc;
        margin-bottom: 4px;
    }

    .metric-value {
        font-size: 14px;
        color: #ffffff;
        font-weight: 600;
        margin-bottom: 4px;
    }

    .metric-bar {
        height: 4px;
        background: #3e3e42;
        border-radius: 2px;
        overflow: hidden;
    }

    .metric-fill {
        height: 100%;
        background: #0078d4;
        transition: width 0.3s ease;
    }
</style>

@code {
    [Parameter] public object? ExecutionState { get; set; }

    private class ExecutionStep
    {
        public string NodeName { get; set; } = "";
        public string Status { get; set; } = "";
        public DateTime Timestamp { get; set; }
        public TimeSpan? Duration { get; set; }
        public string Message { get; set; } = "";
    }

    private List<ExecutionStep> GetExecutionSteps()
    {
        return new List<ExecutionStep>
        {
            new() { NodeName = "Start Node", Status = "completed", Timestamp = DateTime.Now.AddSeconds(-30), Duration = TimeSpan.FromMilliseconds(50) },
            new() { NodeName = "LLM Agent", Status = "completed", Timestamp = DateTime.Now.AddSeconds(-25), Duration = TimeSpan.FromMilliseconds(1200), Message = "Generated response with 95% confidence" },
            new() { NodeName = "Tool Agent", Status = "running", Timestamp = DateTime.Now.AddSeconds(-5), Message = "Executing database query..." },
            new() { NodeName = "Conditional Agent", Status = "pending", Timestamp = DateTime.Now },
            new() { NodeName = "End Node", Status = "pending", Timestamp = DateTime.Now }
        };
    }

    private string GetStepClass(ExecutionStep step)
    {
        return step.Status switch
        {
            "running" => "running",
            "completed" => "completed",
            "error" => "error",
            _ => ""
        };
    }

    private string GetStepIcon(string status)
    {
        return status switch
        {
            "running" => "bi-arrow-clockwise",
            "completed" => "bi-check-circle",
            "error" => "bi-exclamation-circle",
            "pending" => "bi-clock",
            _ => "bi-circle"
        };
    }

    private int GetCurrentStep()
    {
        return 3;
    }

    private int GetTotalSteps()
    {
        return 5;
    }

    private int GetProgress()
    {
        return (int)((double)GetCurrentStep() / GetTotalSteps() * 100);
    }

    private string GetElapsedTime()
    {
        return "00:00:30";
    }

    private string GetExecutionStatus()
    {
        return "Running";
    }

    private int GetErrorCount()
    {
        return 0;
    }

    private int GetCpuUsage()
    {
        return Random.Shared.Next(20, 80);
    }

    private string GetMemoryUsage()
    {
        return "45.2 MB";
    }

    private int GetMemoryUsagePercent()
    {
        return Random.Shared.Next(30, 70);
    }

    private int GetTokenRate()
    {
        return Random.Shared.Next(50, 200);
    }

    private int GetTokenRatePercent()
    {
        return Random.Shared.Next(40, 90);
    }

    private void ClearLogs()
    {
        // Implementation for clearing logs
    }

    private void ExportLogs()
    {
        // Implementation for exporting logs
    }
}
