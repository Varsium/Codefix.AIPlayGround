@using Codefix.AIPlayGround.Models
@using System.Text.Json

<div class="agent-inspector">
    <div class="inspector-header">
        <h5><i class="bi bi-search"></i> Agent Inspector</h5>
        <div class="inspector-controls">
            <input type="text" class="form-control form-control-sm" placeholder="Search agents..." @bind="searchQuery" @bind:after="FilterAgents" />
        </div>
    </div>

    <div class="inspector-content">
        @if (CurrentWorkflow == null || !CurrentWorkflow.Nodes.Any())
        {
            <div class="empty-state">
                <i class="bi bi-search"></i>
                <h6>No Agents to Inspect</h6>
                <p>Add agents to your workflow to see them here</p>
            </div>
        }
        else
        {
            <div class="agents-grid">
                @foreach (var node in filteredNodes)
                {
                    <div class="agent-card @(selectedAgentId == node.Id ? "selected" : "")" @onclick="() => SelectAgent(node)">
                        <div class="agent-header">
                            <div class="agent-icon">
                                <i class="@GetAgentIcon(node.Type)"></i>
                            </div>
                            <div class="agent-info">
                                <div class="agent-name">@node.Name</div>
                                <div class="agent-type">@node.Type</div>
                            </div>
                            <div class="agent-status">
                                <span class="status-indicator status-@node.Status"></span>
                            </div>
                        </div>
                    </div>
                }
            </div>

            @if (selectedAgent != null)
            {
                <div class="agent-details">
                    <div class="details-header">
                        <h6>@selectedAgent.Name</h6>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="CloseDetails">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>

                    <div class="details-tabs">
                        <button class="tab-btn @(detailsTab == "config" ? "active" : "")" @onclick='() => detailsTab = "config"'>
                            Configuration
                        </button>
                        <button class="tab-btn @(detailsTab == "state" ? "active" : "")" @onclick='() => detailsTab = "state"'>
                            State
                        </button>
                        <button class="tab-btn @(detailsTab == "tools" ? "active" : "")" @onclick='() => detailsTab = "tools"'>
                            Tools
                        </button>
                        <button class="tab-btn @(detailsTab == "ports" ? "active" : "")" @onclick='() => detailsTab = "ports"'>
                            Ports
                        </button>
                    </div>

                    <div class="details-content">
                        @if (detailsTab == "config")
                        {
                            <div class="config-section">
                                <div class="property-row">
                                    <span class="property-label">ID</span>
                                    <span class="property-value">@selectedAgent.Id</span>
                                </div>
                                <div class="property-row">
                                    <span class="property-label">Type</span>
                                    <span class="property-value">@selectedAgent.Type</span>
                                </div>
                                <div class="property-row">
                                    <span class="property-label">Position</span>
                                    <span class="property-value">(@selectedAgent.X, @selectedAgent.Y)</span>
                                </div>
                                <div class="property-row">
                                    <span class="property-label">Status</span>
                                    <span class="property-value">
                                        <span class="status-badge status-@selectedAgent.Status">@selectedAgent.Status</span>
                                    </span>
                                </div>

                                @if (selectedAgent.AgentDefinition != null)
                                {
                                    <hr />
                                    <h6 class="section-title">Agent Definition</h6>
                                    
                                    <div class="property-row">
                                        <span class="property-label">Name</span>
                                        <span class="property-value">@selectedAgent.AgentDefinition.Name</span>
                                    </div>
                                    <div class="property-row">
                                        <span class="property-label">Description</span>
                                        <span class="property-value">@selectedAgent.AgentDefinition.Description</span>
                                    </div>

                                    @if (selectedAgent.AgentDefinition.LLMConfig != null)
                                    {
                                        <hr />
                                        <h6 class="section-title">LLM Configuration</h6>
                                        <div class="property-row">
                                            <span class="property-label">Model</span>
                                            <span class="property-value">@selectedAgent.AgentDefinition.LLMConfig.ModelName</span>
                                        </div>
                                        <div class="property-row">
                                            <span class="property-label">Provider</span>
                                            <span class="property-value">@selectedAgent.AgentDefinition.LLMConfig.Provider</span>
                                        </div>
                                        <div class="property-row">
                                            <span class="property-label">Temperature</span>
                                            <span class="property-value">@selectedAgent.AgentDefinition.LLMConfig.Temperature</span>
                                        </div>
                                        <div class="property-row">
                                            <span class="property-label">Max Tokens</span>
                                            <span class="property-value">@selectedAgent.AgentDefinition.LLMConfig.MaxTokens</span>
                                        </div>
                                    }
                                }

                                @if (selectedAgent.ExecutionSettings != null)
                                {
                                    <hr />
                                    <h6 class="section-title">Execution Settings</h6>
                                    <div class="property-row">
                                        <span class="property-label">Timeout</span>
                                        <span class="property-value">@selectedAgent.ExecutionSettings.TimeoutSeconds s</span>
                                    </div>
                                    <div class="property-row">
                                        <span class="property-label">Retry Count</span>
                                        <span class="property-value">@selectedAgent.ExecutionSettings.RetryCount</span>
                                    </div>
                                    <div class="property-row">
                                        <span class="property-label">Execution Mode</span>
                                        <span class="property-value">@selectedAgent.ExecutionSettings.ExecutionMode</span>
                                    </div>
                                }
                            </div>
                        }
                        else if (detailsTab == "state")
                        {
                            <div class="state-section">
                                <h6 class="section-title">Runtime State</h6>
                                <div class="property-row">
                                    <span class="property-label">Status</span>
                                    <span class="property-value">
                                        <span class="status-badge status-@selectedAgent.Status">@selectedAgent.Status</span>
                                    </span>
                                </div>
                                
                                @if (selectedAgent.Properties.Any())
                                {
                                    <hr />
                                    <h6 class="section-title">Properties</h6>
                                    <pre class="json-view">@JsonSerializer.Serialize(selectedAgent.Properties, new JsonSerializerOptions { WriteIndented = true })</pre>
                                }

                                @if (selectedAgent.Metadata.Any())
                                {
                                    <hr />
                                    <h6 class="section-title">Metadata</h6>
                                    <pre class="json-view">@JsonSerializer.Serialize(selectedAgent.Metadata, new JsonSerializerOptions { WriteIndented = true })</pre>
                                }
                            </div>
                        }
                        else if (detailsTab == "tools")
                        {
                            <div class="tools-section">
                                @if (selectedAgent.AgentDefinition?.Tools.Any() == true)
                                {
                                    @foreach (var tool in selectedAgent.AgentDefinition.Tools)
                                    {
                                        <div class="tool-card">
                                            <div class="tool-header">
                                                <span class="tool-name">@tool.Name</span>
                                                <span class="tool-status @(tool.IsEnabled ? "enabled" : "disabled")">
                                                    @(tool.IsEnabled ? "Enabled" : "Disabled")
                                                </span>
                                            </div>
                                            <div class="tool-type">Type: @tool.Type</div>
                                            <div class="tool-description">@tool.Description</div>
                                            @if (tool.Parameters.Any())
                                            {
                                                <details class="tool-parameters">
                                                    <summary>Parameters</summary>
                                                    <pre>@JsonSerializer.Serialize(tool.Parameters, new JsonSerializerOptions { WriteIndented = true })</pre>
                                                </details>
                                            }
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="empty-state">
                                        <i class="bi bi-tools"></i>
                                        <p>No tools configured for this agent</p>
                                    </div>
                                }
                            </div>
                        }
                        else if (detailsTab == "ports")
                        {
                            <div class="ports-section">
                                <h6 class="section-title">Input Ports</h6>
                                @if (selectedAgent.InputPorts.Any())
                                {
                                    @foreach (var port in selectedAgent.InputPorts)
                                    {
                                        <div class="port-card">
                                            <div class="port-name">@port.Name</div>
                                            <div class="port-details">
                                                <span class="port-type">@port.DataType</span>
                                                @if (port.IsRequired)
                                                {
                                                    <span class="port-required">Required</span>
                                                }
                                            </div>
                                            @if (!string.IsNullOrEmpty(port.Description))
                                            {
                                                <div class="port-description">@port.Description</div>
                                            }
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p class="text-muted">No input ports</p>
                                }

                                <hr />
                                <h6 class="section-title">Output Ports</h6>
                                @if (selectedAgent.OutputPorts.Any())
                                {
                                    @foreach (var port in selectedAgent.OutputPorts)
                                    {
                                        <div class="port-card">
                                            <div class="port-name">@port.Name</div>
                                            <div class="port-details">
                                                <span class="port-type">@port.DataType</span>
                                            </div>
                                            @if (!string.IsNullOrEmpty(port.Description))
                                            {
                                                <div class="port-description">@port.Description</div>
                                            }
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p class="text-muted">No output ports</p>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

<style>
    .agent-inspector {
        height: 100%;
        display: flex;
        flex-direction: column;
        background: white;
    }

    .inspector-header {
        padding: 1.5rem;
        border-bottom: 1px solid #dee2e6;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .inspector-header h5 {
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .inspector-controls input {
        min-width: 250px;
    }

    .inspector-content {
        flex: 1;
        overflow-y: auto;
        padding: 1.5rem;
        position: relative;
    }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        color: #6c757d;
    }

    .empty-state i {
        font-size: 4rem;
        margin-bottom: 1rem;
        opacity: 0.3;
    }

    .agents-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .agent-card {
        background: white;
        border: 2px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .agent-card:hover {
        border-color: #667eea;
        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.2);
        transform: translateY(-2px);
    }

    .agent-card.selected {
        border-color: #667eea;
        background: #f8f9ff;
    }

    .agent-header {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .agent-icon {
        width: 3rem;
        height: 3rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.5rem;
    }

    .agent-info {
        flex: 1;
    }

    .agent-name {
        font-weight: 600;
        font-size: 1rem;
        margin-bottom: 0.25rem;
    }

    .agent-type {
        font-size: 0.875rem;
        color: #6c757d;
    }

    .agent-status {
        display: flex;
        align-items: center;
    }

    .status-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        display: inline-block;
    }

    .status-indicator.status-idle {
        background: #adb5bd;
    }

    .status-indicator.status-running {
        background: #1976d2;
        animation: pulse 2s infinite;
    }

    .status-indicator.status-completed {
        background: #2e7d32;
    }

    .status-indicator.status-error {
        background: #c62828;
    }

    .agent-details {
        position: fixed;
        top: 10vh;
        right: 2rem;
        width: 500px;
        max-height: 80vh;
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 12px;
        box-shadow: 0 8px 24px rgba(0,0,0,0.15);
        display: flex;
        flex-direction: column;
        z-index: 1000;
    }

    .details-header {
        padding: 1.5rem;
        border-bottom: 1px solid #dee2e6;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .details-header h6 {
        margin: 0;
        font-weight: 600;
    }

    .details-tabs {
        display: flex;
        border-bottom: 1px solid #dee2e6;
        padding: 0 1rem;
    }

    .tab-btn {
        padding: 0.75rem 1rem;
        background: none;
        border: none;
        border-bottom: 2px solid transparent;
        color: #6c757d;
        cursor: pointer;
        transition: all 0.2s;
        font-size: 0.875rem;
    }

    .tab-btn:hover {
        color: #667eea;
    }

    .tab-btn.active {
        color: #667eea;
        border-bottom-color: #667eea;
    }

    .details-content {
        flex: 1;
        overflow-y: auto;
        padding: 1.5rem;
    }

    .section-title {
        font-size: 0.875rem;
        font-weight: 600;
        color: #667eea;
        margin-bottom: 1rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .property-row {
        display: flex;
        justify-content: space-between;
        padding: 0.75rem 0;
        border-bottom: 1px solid #f1f3f5;
    }

    .property-label {
        font-weight: 600;
        color: #6c757d;
        font-size: 0.875rem;
    }

    .property-value {
        color: #212529;
        font-size: 0.875rem;
        text-align: right;
    }

    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
    }

    .status-badge.status-idle {
        background: #e9ecef;
        color: #495057;
    }

    .status-badge.status-running {
        background: #e3f2fd;
        color: #1976d2;
    }

    .status-badge.status-completed {
        background: #e8f5e9;
        color: #2e7d32;
    }

    .status-badge.status-error {
        background: #ffebee;
        color: #c62828;
    }

    .json-view {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 4px;
        font-size: 0.8rem;
        max-height: 300px;
        overflow-y: auto;
    }

    .tool-card {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
    }

    .tool-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
    }

    .tool-name {
        font-weight: 600;
        font-size: 1rem;
    }

    .tool-status {
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .tool-status.enabled {
        background: #e8f5e9;
        color: #2e7d32;
    }

    .tool-status.disabled {
        background: #e9ecef;
        color: #6c757d;
    }

    .tool-type, .tool-description {
        font-size: 0.875rem;
        color: #6c757d;
        margin-bottom: 0.25rem;
    }

    .tool-parameters {
        margin-top: 0.5rem;
    }

    .tool-parameters summary {
        cursor: pointer;
        font-size: 0.875rem;
        color: #667eea;
        font-weight: 600;
    }

    .port-card {
        background: #f8f9fa;
        border-left: 3px solid #667eea;
        border-radius: 4px;
        padding: 0.75rem;
        margin-bottom: 0.75rem;
    }

    .port-name {
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .port-details {
        display: flex;
        gap: 0.5rem;
        margin-bottom: 0.25rem;
    }

    .port-type {
        background: #667eea;
        color: white;
        padding: 0.125rem 0.5rem;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .port-required {
        background: #ff6b6b;
        color: white;
        padding: 0.125rem 0.5rem;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .port-description {
        font-size: 0.875rem;
        color: #6c757d;
    }

    @@keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }
</style>

@code {
    [Parameter] public string WorkflowId { get; set; } = string.Empty;
    [Parameter] public Models.WorkflowDefinition? CurrentWorkflow { get; set; }

    private string searchQuery = string.Empty;
    private List<EnhancedWorkflowNode> filteredNodes = new();
    private string? selectedAgentId;
    private EnhancedWorkflowNode? selectedAgent;
    private string detailsTab = "config";

    protected override void OnParametersSet()
    {
        FilterAgents();
    }

    private void FilterAgents()
    {
        if (CurrentWorkflow == null)
        {
            filteredNodes = new();
            return;
        }

        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredNodes = CurrentWorkflow.Nodes.ToList();
        }
        else
        {
            var query = searchQuery.ToLower();
            filteredNodes = CurrentWorkflow.Nodes
                .Where(n => n.Name.ToLower().Contains(query) || 
                           n.Type.ToLower().Contains(query))
                .ToList();
        }
    }

    private void SelectAgent(EnhancedWorkflowNode node)
    {
        selectedAgentId = node.Id;
        selectedAgent = node;
        detailsTab = "config";
        StateHasChanged();
    }

    private void CloseDetails()
    {
        selectedAgentId = null;
        selectedAgent = null;
        StateHasChanged();
    }

    private string GetAgentIcon(string type)
    {
        return type.ToLower() switch
        {
            "startnode" or "start" => "bi bi-play-circle-fill",
            "endnode" or "end" => "bi bi-stop-circle-fill",
            "llmagent" or "agent" => "bi bi-robot",
            "toolagent" or "tool" => "bi bi-tools",
            "conditionalagent" or "condition" => "bi bi-diagram-2-fill",
            "parallelagent" or "parallel" => "bi bi-arrow-left-right",
            "checkpointagent" or "checkpoint" => "bi bi-bookmark-fill",
            "mcpagent" or "mcp" => "bi bi-link-45deg",
            "functionnode" or "function" => "bi bi-gear-fill",
            _ => "bi bi-circle-fill"
        };
    }
}

