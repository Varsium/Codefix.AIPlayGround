@using Codefix.AIPlayGround.Models
@inject IJSRuntime JSRuntime

<div class="workflow-canvas" @ref="canvasRef">
    <div class="canvas-header">
        <h5>Workflow Canvas</h5>
        <div class="canvas-controls">
            <button class="btn btn-sm btn-outline-secondary" @onclick="ClearCanvas">
                <i class="bi bi-trash"></i> Clear
            </button>
            <button class="btn btn-sm btn-outline-primary" @onclick="SaveWorkflow">
                <i class="bi bi-save"></i> Save
            </button>
        </div>
    </div>
    
    <div class="canvas-area" @ref="canvasAreaRef">
        @foreach (var node in Nodes)
        {
            <div class="canvas-node" style="left: @(node.X)px; top: @(node.Y)px; width: @(node.Width)px; height: @(node.Height)px;">
                <div class="node-header">
                    <span class="node-icon">@GetNodeIcon(node.Type)</span>
                    <span class="node-title">@node.Name</span>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .workflow-canvas {
        background: #f8f9fa;
        border-radius: 8px;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .canvas-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        border-bottom: 1px solid #dee2e6;
        background: white;
        border-radius: 8px 8px 0 0;
    }

    .canvas-controls {
        display: flex;
        gap: 8px;
    }

    .canvas-area {
        flex: 1;
        position: relative;
        background: 
            radial-gradient(circle, #e9ecef 1px, transparent 1px);
        background-size: 20px 20px;
        overflow: hidden;
        cursor: grab;
    }

    .canvas-area:active {
        cursor: grabbing;
    }

    .canvas-node {
        position: absolute;
        background: white;
        border: 2px solid #dee2e6;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        cursor: move;
        user-select: none;
        transition: all 0.2s ease;
        z-index: 10;
    }

    .canvas-node:hover {
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transform: translateY(-1px);
    }

    .node-header {
        display: flex;
        align-items: center;
        padding: 8px 12px;
        border-bottom: 1px solid #f0f0f0;
        background: #f8f9fa;
        border-radius: 6px 6px 0 0;
    }

    .node-icon {
        font-size: 16px;
        margin-right: 8px;
    }

    .node-title {
        flex: 1;
        font-weight: 500;
        font-size: 14px;
        color: #333;
    }
</style>

@code {
    [Parameter] public List<WorkflowNode> Nodes { get; set; } = new();
    [Parameter] public List<WorkflowConnection> Connections { get; set; } = new();
    [Parameter] public EventCallback<WorkflowNode> OnNodeSelected { get; set; }
    [Parameter] public EventCallback<WorkflowNode> OnNodeMoved { get; set; }
    [Parameter] public EventCallback<WorkflowNode> OnNodeDeleted { get; set; }
    [Parameter] public EventCallback<WorkflowConnection> OnConnectionDeleted { get; set; }
    [Parameter] public EventCallback OnWorkflowSaved { get; set; }

    private ElementReference canvasRef;
    private ElementReference canvasAreaRef;
    private WorkflowNode? selectedNode;

    private async Task HandleNodeMoved(WorkflowNode node)
    {
        await OnNodeMoved.InvokeAsync(node);
    }

    private async Task HandleNodeSelected(WorkflowNode node)
    {
        selectedNode = node;
        await OnNodeSelected.InvokeAsync(node);
    }

    private async Task HandleNodeDeleted(WorkflowNode node)
    {
        await OnNodeDeleted.InvokeAsync(node);
    }

    private async Task HandleConnectionDeleted(WorkflowConnection connection)
    {
        await OnConnectionDeleted.InvokeAsync(connection);
    }

    private async Task ClearCanvas()
    {
        Nodes.Clear();
        Connections.Clear();
        StateHasChanged();
    }

    private async Task SaveWorkflow()
    {
        await OnWorkflowSaved.InvokeAsync();
    }

    private string GetNodeIcon(string nodeType)
    {
        return nodeType switch
        {
            "start" => "🚀",
            "end" => "🏁",
            "agent" => "🤖",
            "function" => "⚙️",
            "condition" => "🔀",
            "parallel" => "⚡",
            _ => "📦"
        };
    }
}
