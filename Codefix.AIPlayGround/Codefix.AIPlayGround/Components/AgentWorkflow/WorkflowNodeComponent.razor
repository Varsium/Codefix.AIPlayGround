@using Codefix.AIPlayGround.Models
@inject IJSRuntime JSRuntime

<div class="workflow-node @(Node.IsSelected ? "selected" : "") @(Node.Status)" 
     style="left: @(Node.X)px; top: @(Node.Y)px; width: @(Node.Width)px; height: @(Node.Height)px;"
     @onclick="() => OnNodeSelected.InvokeAsync(Node)"
     @onmousedown="StartDrag"
     @ref="nodeRef">
    
    <div class="node-header">
        <span class="node-icon">@GetNodeIcon(Node.Type)</span>
        <span class="node-title">@Node.Name</span>
        <div class="node-actions">
            <button class="btn-icon" @onclick="() => OnNodeDeleted.InvokeAsync(Node)" @onclick:stopPropagation="true">
                <i class="bi bi-x"></i>
            </button>
        </div>
    </div>
    
    <div class="node-content">
        <div class="node-status">
            <span class="status-indicator @Node.Status"></span>
            <span class="status-text">@Node.Status</span>
        </div>
    </div>
    
    <!-- Input Ports -->
    <div class="input-ports">
        @foreach (var port in Node.InputPorts)
        {
            <div class="port input-port" data-port="@port" @onclick="@(() => HandlePortClick(port, "input"))" @onclick:stopPropagation="true">
                <div class="port-dot"></div>
            </div>
        }
    </div>
    
    <!-- Output Ports -->
    <div class="output-ports">
        @foreach (var port in Node.OutputPorts)
        {
            <div class="port output-port" data-port="@port" @onclick="@(() => HandlePortClick(port, "output"))" @onclick:stopPropagation="true">
                <div class="port-dot"></div>
            </div>
        }
    </div>
</div>

<style>
    .workflow-node {
        position: absolute;
        background: white;
        border: 2px solid #dee2e6;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        cursor: move;
        user-select: none;
        transition: all 0.2s ease;
        z-index: 10;
    }

    .workflow-node:hover {
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transform: translateY(-1px);
    }

    .workflow-node.selected {
        border-color: #007bff;
        box-shadow: 0 0 0 3px rgba(0,123,255,0.25);
    }

    .workflow-node.running {
        border-color: #ffc107;
        animation: pulse 2s infinite;
    }

    .workflow-node.completed {
        border-color: #28a745;
    }

    .workflow-node.error {
        border-color: #dc3545;
    }

    @@keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(255,193,7,0.7); }
        70% { box-shadow: 0 0 0 10px rgba(255,193,7,0); }
        100% { box-shadow: 0 0 0 0 rgba(255,193,7,0); }
    }

    .node-header {
        display: flex;
        align-items: center;
        padding: 8px 12px;
        border-bottom: 1px solid #f0f0f0;
        background: #f8f9fa;
        border-radius: 6px 6px 0 0;
    }

    .node-icon {
        font-size: 16px;
        margin-right: 8px;
    }

    .node-title {
        flex: 1;
        font-weight: 500;
        font-size: 14px;
        color: #333;
    }

    .node-actions {
        display: flex;
        gap: 4px;
    }

    .btn-icon {
        background: none;
        border: none;
        padding: 2px 4px;
        border-radius: 4px;
        cursor: pointer;
        color: #6c757d;
        font-size: 12px;
    }

    .btn-icon:hover {
        background: #e9ecef;
        color: #dc3545;
    }

    .node-content {
        padding: 8px 12px;
    }

    .node-status {
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .status-indicator {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #6c757d;
    }

    .status-indicator.idle { background: #6c757d; }
    .status-indicator.running { background: #ffc107; }
    .status-indicator.completed { background: #28a745; }
    .status-indicator.error { background: #dc3545; }

    .status-text {
        font-size: 12px;
        color: #6c757d;
        text-transform: capitalize;
    }

    .input-ports, .output-ports {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
    }

    .input-ports {
        left: -8px;
    }

    .output-ports {
        right: -8px;
    }

    .port {
        width: 16px;
        height: 16px;
        border-radius: 50%;
        background: white;
        border: 2px solid #dee2e6;
        cursor: pointer;
        margin: 4px 0;
        position: relative;
        transition: all 0.2s;
    }

    .port:hover {
        border-color: #007bff;
        transform: scale(1.2);
    }

    .port-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #6c757d;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .input-port .port-dot {
        background: #28a745;
    }

    .output-port .port-dot {
        background: #007bff;
    }
</style>

@code {
    [Parameter] public WorkflowNode Node { get; set; } = new();
    [Parameter] public EventCallback<WorkflowNode> OnNodeSelected { get; set; }
    [Parameter] public EventCallback<WorkflowNode> OnNodeMoved { get; set; }
    [Parameter] public EventCallback<WorkflowNode> OnNodeDeleted { get; set; }

    private ElementReference nodeRef;
    private bool isDragging = false;
    private double startX, startY;
    private double nodeStartX, nodeStartY;

    private string GetNodeIcon(string nodeType)
    {
        return nodeType switch
        {
            "start" => "🚀",
            "end" => "🏁",
            "agent" => "🤖",
            "function" => "⚙️",
            "condition" => "🔀",
            "parallel" => "⚡",
            _ => "📦"
        };
    }

    private async Task StartDrag(MouseEventArgs e)
    {
        isDragging = true;
        startX = e.ClientX;
        startY = e.ClientY;
        nodeStartX = Node.X;
        nodeStartY = Node.Y;
        
        await JSRuntime.InvokeVoidAsync("addEventListener", "mousemove", DotNetObjectReference.Create(this), "HandleMouseMove");
        await JSRuntime.InvokeVoidAsync("addEventListener", "mouseup", DotNetObjectReference.Create(this), "HandleMouseUp");
    }

    [JSInvokable]
    public async Task HandleMouseMove(double clientX, double clientY)
    {
        if (!isDragging) return;

        var deltaX = clientX - startX;
        var deltaY = clientY - startY;

        Node.X = nodeStartX + deltaX;
        Node.Y = nodeStartY + deltaY;

        await OnNodeMoved.InvokeAsync(Node);
        StateHasChanged();
    }

    [JSInvokable]
    public async Task HandleMouseUp()
    {
        isDragging = false;
        await JSRuntime.InvokeVoidAsync("removeEventListener", "mousemove");
        await JSRuntime.InvokeVoidAsync("removeEventListener", "mouseup");
    }

    private async Task HandlePortClick(string port, string type)
    {
        // Handle port connection logic here
        await Task.CompletedTask;
    }
}
