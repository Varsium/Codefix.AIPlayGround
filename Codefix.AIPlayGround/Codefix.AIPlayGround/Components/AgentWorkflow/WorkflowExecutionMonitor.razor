@using Codefix.AIPlayGround.Models
@using System.Timers

<div class="execution-monitor">
    <div class="monitor-header">
        <h5><i class="bi bi-activity"></i> Workflow Execution Monitor</h5>
        <div class="monitor-controls">
            @if (currentExecution != null)
            {
                @if (currentExecution.Status == ExecutionStatus.Running)
                {
                    <button class="btn btn-warning btn-sm" @onclick="PauseExecution">
                        <i class="bi bi-pause"></i> Pause
                    </button>
                    <button class="btn btn-danger btn-sm" @onclick="StopExecution">
                        <i class="bi bi-stop"></i> Stop
                    </button>
                }
                else if (currentExecution.Status == ExecutionStatus.Paused)
                {
                    <button class="btn btn-success btn-sm" @onclick="ResumeExecution">
                        <i class="bi bi-play"></i> Resume
                    </button>
                }
                else
                {
                    <button class="btn btn-primary btn-sm" @onclick="StartExecution">
                        <i class="bi bi-play"></i> Start New
                    </button>
                }
            }
            else
            {
                <button class="btn btn-primary btn-sm" @onclick="StartExecution">
                    <i class="bi bi-play"></i> Start Execution
                </button>
            }
        </div>
    </div>

    <div class="monitor-content">
        @if (currentExecution == null)
        {
            <div class="empty-state">
                <i class="bi bi-play-circle"></i>
                <h6>No Active Execution</h6>
                <p>Click "Start Execution" to begin running the workflow</p>
            </div>
        }
        else
        {
            <div class="execution-overview">
                <div class="info-card">
                    <div class="info-label">Execution ID</div>
                    <div class="info-value">@currentExecution.Id.Substring(0, 8)</div>
                </div>
                <div class="info-card">
                    <div class="info-label">Status</div>
                    <div class="info-value">
                        <span class="status-badge status-@currentExecution.Status.ToString().ToLower()">
                            @currentExecution.Status
                        </span>
                    </div>
                </div>
                <div class="info-card">
                    <div class="info-label">Started</div>
                    <div class="info-value">@currentExecution.StartedAt.ToString("HH:mm:ss")</div>
                </div>
                <div class="info-card">
                    <div class="info-label">Duration</div>
                    <div class="info-value">@GetDuration()</div>
                </div>
                <div class="info-card">
                    <div class="info-label">Progress</div>
                    <div class="info-value">@currentExecution.Steps.Count(s => s.Status == ExecutionStatus.Completed) / @CurrentWorkflow?.Nodes.Count</div>
                </div>
            </div>

            <div class="execution-steps">
                <h6>Execution Steps</h6>
                <div class="steps-timeline">
                    @foreach (var step in currentExecution.Steps.OrderBy(s => s.StartedAt))
                    {
                        var node = CurrentWorkflow?.Nodes.FirstOrDefault(n => n.Id == step.NodeId);
                        <div class="step-item status-@step.Status.ToString().ToLower()">
                            <div class="step-icon">
                                @if (step.Status == ExecutionStatus.Completed)
                                {
                                    <i class="bi bi-check-circle-fill text-success"></i>
                                }
                                else if (step.Status == ExecutionStatus.Running)
                                {
                                    <i class="bi bi-arrow-repeat spinner text-primary"></i>
                                }
                                else if (step.Status == ExecutionStatus.Failed)
                                {
                                    <i class="bi bi-x-circle-fill text-danger"></i>
                                }
                                else
                                {
                                    <i class="bi bi-circle text-muted"></i>
                                }
                            </div>
                            <div class="step-content">
                                <div class="step-header">
                                    <span class="step-name">@step.NodeName</span>
                                    <span class="step-time">@step.StartedAt.ToString("HH:mm:ss")</span>
                                </div>
                                @if (node != null)
                                {
                                    <div class="step-type">@node.Type</div>
                                }
                                @if (step.Status == ExecutionStatus.Completed)
                                {
                                    <div class="step-duration">
                                        <i class="bi bi-clock"></i> @GetStepDuration(step)
                                    </div>
                                }
                                @if (step.Errors.Any())
                                {
                                    <div class="step-errors">
                                        @foreach (var error in step.Errors)
                                        {
                                            <div class="error-message">
                                                <i class="bi bi-exclamation-triangle"></i> @error.Message
                                            </div>
                                        }
                                    </div>
                                }
                                @if (step.OutputData.Any())
                                {
                                    <details class="step-output">
                                        <summary>Output Data</summary>
                                        <pre>@System.Text.Json.JsonSerializer.Serialize(step.OutputData, new System.Text.Json.JsonSerializerOptions { WriteIndented = true })</pre>
                                    </details>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>

            @if (currentExecution.Errors.Any())
            {
                <div class="execution-errors">
                    <h6><i class="bi bi-exclamation-triangle"></i> Execution Errors</h6>
                    @foreach (var error in currentExecution.Errors)
                    {
                        <div class="error-card">
                            <div class="error-header">
                                <span class="error-type">@error.ErrorType</span>
                                <span class="error-time">@error.OccurredAt.ToString("HH:mm:ss")</span>
                            </div>
                            <div class="error-message">@error.Message</div>
                            @if (!string.IsNullOrEmpty(error.StackTrace))
                            {
                                <details class="error-stack">
                                    <summary>Stack Trace</summary>
                                    <pre>@error.StackTrace</pre>
                                </details>
                            }
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>

<style>
    .execution-monitor {
        height: 100%;
        display: flex;
        flex-direction: column;
        background: white;
    }

    .monitor-header {
        padding: 1.5rem;
        border-bottom: 1px solid #dee2e6;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .monitor-header h5 {
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .monitor-controls {
        display: flex;
        gap: 0.5rem;
    }

    .monitor-content {
        flex: 1;
        overflow-y: auto;
        padding: 1.5rem;
    }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        color: #6c757d;
    }

    .empty-state i {
        font-size: 4rem;
        margin-bottom: 1rem;
        opacity: 0.3;
    }

    .empty-state h6 {
        font-size: 1.25rem;
        margin-bottom: 0.5rem;
    }

    .execution-overview {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .info-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #667eea;
    }

    .info-label {
        font-size: 0.875rem;
        color: #6c757d;
        margin-bottom: 0.25rem;
        font-weight: 500;
    }

    .info-value {
        font-size: 1.25rem;
        font-weight: 600;
        color: #212529;
    }

    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-size: 0.875rem;
        font-weight: 600;
        text-transform: uppercase;
    }

    .status-running {
        background: #e3f2fd;
        color: #1976d2;
    }

    .status-completed {
        background: #e8f5e9;
        color: #2e7d32;
    }

    .status-failed {
        background: #ffebee;
        color: #c62828;
    }

    .status-paused {
        background: #fff3e0;
        color: #ef6c00;
    }

    .execution-steps {
        margin-bottom: 2rem;
    }

    .execution-steps h6 {
        margin-bottom: 1rem;
        font-weight: 600;
    }

    .steps-timeline {
        position: relative;
        padding-left: 2rem;
    }

    .steps-timeline::before {
        content: '';
        position: absolute;
        left: 0.5rem;
        top: 0;
        bottom: 0;
        width: 2px;
        background: #dee2e6;
    }

    .step-item {
        position: relative;
        margin-bottom: 1.5rem;
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem;
        transition: all 0.2s ease;
    }

    .step-item:hover {
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .step-icon {
        position: absolute;
        left: -1.75rem;
        top: 1rem;
        font-size: 1.25rem;
        background: white;
    }

    .step-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
    }

    .step-name {
        font-weight: 600;
        font-size: 1rem;
    }

    .step-time {
        font-size: 0.875rem;
        color: #6c757d;
    }

    .step-type {
        font-size: 0.875rem;
        color: #6c757d;
        margin-bottom: 0.5rem;
    }

    .step-duration {
        font-size: 0.875rem;
        color: #667eea;
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .step-errors {
        margin-top: 0.75rem;
    }

    .error-message {
        background: #ffebee;
        color: #c62828;
        padding: 0.5rem;
        border-radius: 4px;
        font-size: 0.875rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .step-output {
        margin-top: 0.75rem;
        background: #f8f9fa;
        padding: 0.75rem;
        border-radius: 4px;
    }

    .step-output summary {
        cursor: pointer;
        font-weight: 600;
        font-size: 0.875rem;
        color: #667eea;
    }

    .step-output pre {
        margin-top: 0.5rem;
        margin-bottom: 0;
        font-size: 0.8rem;
        max-height: 200px;
        overflow-y: auto;
    }

    .execution-errors {
        background: #fff5f5;
        border: 1px solid #fc8181;
        border-radius: 8px;
        padding: 1rem;
    }

    .execution-errors h6 {
        color: #c62828;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .error-card {
        background: white;
        border: 1px solid #ffcdd2;
        border-radius: 4px;
        padding: 1rem;
        margin-bottom: 1rem;
    }

    .error-card:last-child {
        margin-bottom: 0;
    }

    .error-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
    }

    .error-type {
        font-weight: 600;
        color: #c62828;
    }

    .error-time {
        font-size: 0.875rem;
        color: #6c757d;
    }

    .error-stack {
        margin-top: 0.5rem;
    }

    .error-stack summary {
        cursor: pointer;
        font-size: 0.875rem;
        color: #667eea;
    }

    .error-stack pre {
        margin-top: 0.5rem;
        margin-bottom: 0;
        font-size: 0.75rem;
        max-height: 200px;
        overflow-y: auto;
    }

    .spinner {
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
</style>

@code {
    [Parameter] public string WorkflowId { get; set; } = string.Empty;
    [Parameter] public Models.WorkflowDefinition? CurrentWorkflow { get; set; }

    private WorkflowExecution? currentExecution;
    private Timer? refreshTimer;

    protected override void OnInitialized()
    {
        // Simulate execution for demo
        CreateDemoExecution();

        // Refresh every 2 seconds if execution is running
        refreshTimer = new Timer(2000);
        refreshTimer.Elapsed += async (sender, e) => await RefreshExecution();
        refreshTimer.Start();
    }

    private void CreateDemoExecution()
    {
        if (CurrentWorkflow == null || !CurrentWorkflow.Nodes.Any())
            return;

        currentExecution = new WorkflowExecution
        {
            WorkflowId = WorkflowId,
            Status = ExecutionStatus.Running,
            StartedAt = DateTime.UtcNow.AddMinutes(-2)
        };

        // Add some demo steps
        var completedNodes = CurrentWorkflow.Nodes.Take(2);
        foreach (var node in completedNodes)
        {
            currentExecution.Steps.Add(new ExecutionStep
            {
                NodeId = node.Id,
                NodeName = node.Name,
                Status = ExecutionStatus.Completed,
                StartedAt = DateTime.UtcNow.AddMinutes(-2),
                CompletedAt = DateTime.UtcNow.AddMinutes(-1),
                OutputData = new Dictionary<string, object>
                {
                    ["result"] = "Success",
                    ["data"] = new { processed = true, count = 42 }
                }
            });
        }

        // Add a running step
        if (CurrentWorkflow.Nodes.Count > 2)
        {
            var runningNode = CurrentWorkflow.Nodes[2];
            currentExecution.Steps.Add(new ExecutionStep
            {
                NodeId = runningNode.Id,
                NodeName = runningNode.Name,
                Status = ExecutionStatus.Running,
                StartedAt = DateTime.UtcNow.AddSeconds(-30)
            });
        }
    }

    private async Task RefreshExecution()
    {
        if (currentExecution?.Status == ExecutionStatus.Running)
        {
            // Simulate progress
            await InvokeAsync(StateHasChanged);
        }
    }

    private Task StartExecution()
    {
        CreateDemoExecution();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task PauseExecution()
    {
        if (currentExecution != null)
        {
            currentExecution.Status = ExecutionStatus.Paused;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private Task ResumeExecution()
    {
        if (currentExecution != null)
        {
            currentExecution.Status = ExecutionStatus.Running;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private Task StopExecution()
    {
        if (currentExecution != null)
        {
            currentExecution.Status = ExecutionStatus.Cancelled;
            currentExecution.CompletedAt = DateTime.UtcNow;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private string GetDuration()
    {
        if (currentExecution == null) return "0s";
        
        var end = currentExecution.CompletedAt ?? DateTime.UtcNow;
        var duration = end - currentExecution.StartedAt;
        
        if (duration.TotalMinutes >= 1)
            return $"{duration.TotalMinutes:F1}m";
        return $"{duration.TotalSeconds:F0}s";
    }

    private string GetStepDuration(ExecutionStep step)
    {
        if (step.CompletedAt == null) return "Running...";
        
        var duration = step.CompletedAt.Value - step.StartedAt;
        if (duration.TotalSeconds < 1)
            return $"{duration.TotalMilliseconds:F0}ms";
        return $"{duration.TotalSeconds:F1}s";
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}

