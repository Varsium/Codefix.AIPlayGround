@using Codefix.AIPlayGround.Models
@using System.Timers

<div class="performance-metrics">
    <div class="metrics-header">
        <h5><i class="bi bi-graph-up"></i> Performance Metrics</h5>
        <div class="metrics-controls">
            <select class="form-select form-select-sm" @bind="timeRange">
                <option value="1h">Last Hour</option>
                <option value="24h">Last 24 Hours</option>
                <option value="7d">Last 7 Days</option>
                <option value="30d">Last 30 Days</option>
            </select>
            <button class="btn btn-sm btn-outline-secondary" @onclick="RefreshMetrics">
                <i class="bi bi-arrow-clockwise"></i> Refresh
            </button>
        </div>
    </div>

    <div class="metrics-content">
        <!-- Key Metrics Cards -->
        <div class="metrics-grid">
            <div class="metric-card primary">
                <div class="metric-icon">
                    <i class="bi bi-speedometer2"></i>
                </div>
                <div class="metric-details">
                    <div class="metric-label">Avg Execution Time</div>
                    <div class="metric-value">@avgExecutionTime</div>
                    <div class="metric-change positive">
                        <i class="bi bi-arrow-down"></i> 12% faster
                    </div>
                </div>
            </div>

            <div class="metric-card success">
                <div class="metric-icon">
                    <i class="bi bi-check-circle"></i>
                </div>
                <div class="metric-details">
                    <div class="metric-label">Success Rate</div>
                    <div class="metric-value">@successRate</div>
                    <div class="metric-change positive">
                        <i class="bi bi-arrow-up"></i> 5% increase
                    </div>
                </div>
            </div>

            <div class="metric-card info">
                <div class="metric-icon">
                    <i class="bi bi-coin"></i>
                </div>
                <div class="metric-details">
                    <div class="metric-label">Total Cost</div>
                    <div class="metric-value">@totalCost</div>
                    <div class="metric-change neutral">
                        <i class="bi bi-dash"></i> 0% change
                    </div>
                </div>
            </div>

            <div class="metric-card warning">
                <div class="metric-icon">
                    <i class="bi bi-activity"></i>
                </div>
                <div class="metric-details">
                    <div class="metric-label">Total Executions</div>
                    <div class="metric-value">@totalExecutions</div>
                    <div class="metric-change positive">
                        <i class="bi bi-arrow-up"></i> 23 today
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Section -->
        <div class="charts-section">
            <div class="chart-card">
                <div class="chart-header">
                    <h6>Execution Time Trend</h6>
                    <span class="chart-info">Average execution time per hour</span>
                </div>
                <div class="chart-placeholder">
                    <div class="chart-bars">
                        @foreach (var bar in executionTimeBars)
                        {
                            <div class="bar" style="height: @bar%">
                                <div class="bar-fill"></div>
                            </div>
                        }
                    </div>
                    <div class="chart-labels">
                        @for (int i = 0; i < 12; i++)
                        {
                            <span>@(DateTime.Now.AddHours(-11 + i).Hour)h</span>
                        }
                    </div>
                </div>
            </div>

            <div class="chart-card">
                <div class="chart-header">
                    <h6>Success vs Failure Rate</h6>
                    <span class="chart-info">Execution outcomes over time</span>
                </div>
                <div class="chart-placeholder">
                    <div class="pie-chart">
                        <svg viewBox="0 0 100 100" class="pie">
                            <circle cx="50" cy="50" r="40" fill="transparent" stroke="#4caf50" stroke-width="20" stroke-dasharray="251 0" transform="rotate(-90 50 50)" />
                            <circle cx="50" cy="50" r="40" fill="transparent" stroke="#f44336" stroke-width="20" stroke-dasharray="25 226" stroke-dashoffset="-251" transform="rotate(-90 50 50)" />
                        </svg>
                        <div class="pie-center">
                            <div class="pie-value">95%</div>
                            <div class="pie-label">Success</div>
                        </div>
                    </div>
                    <div class="pie-legend">
                        <div class="legend-item">
                            <span class="legend-color success"></span>
                            <span class="legend-label">Successful (95%)</span>
                        </div>
                        <div class="legend-item">
                            <span class="legend-color danger"></span>
                            <span class="legend-label">Failed (5%)</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Detailed Metrics Table -->
        <div class="metrics-table-section">
            <h6>Node Performance Breakdown</h6>
            <div class="table-responsive">
                <table class="metrics-table">
                    <thead>
                        <tr>
                            <th>Node Name</th>
                            <th>Type</th>
                            <th>Executions</th>
                            <th>Avg Time</th>
                            <th>Success Rate</th>
                            <th>Errors</th>
                            <th>Cost</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var metric in nodeMetrics)
                        {
                            <tr>
                                <td>
                                    <div class="node-name">
                                        <i class="@GetNodeIcon(metric.NodeType)"></i>
                                        @metric.NodeName
                                    </div>
                                </td>
                                <td><span class="node-type-badge">@metric.NodeType</span></td>
                                <td>@metric.Executions</td>
                                <td>@metric.AvgTime</td>
                                <td>
                                    <div class="progress-bar">
                                        <div class="progress-fill" style="width: @metric.SuccessRate%"></div>
                                        <span class="progress-text">@metric.SuccessRate%</span>
                                    </div>
                                </td>
                                <td>
                                    @if (metric.Errors > 0)
                                    {
                                        <span class="error-count">@metric.Errors</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">0</span>
                                    }
                                </td>
                                <td>@metric.Cost</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Resource Usage -->
        <div class="resource-usage-section">
            <h6>Resource Usage</h6>
            <div class="resource-cards">
                <div class="resource-card">
                    <div class="resource-header">
                        <span class="resource-label">API Tokens Used</span>
                        <span class="resource-value">@apiTokensUsed</span>
                    </div>
                    <div class="resource-bar">
                        <div class="resource-fill" style="width: 73%"></div>
                    </div>
                    <div class="resource-footer">73% of quota</div>
                </div>

                <div class="resource-card">
                    <div class="resource-header">
                        <span class="resource-label">Memory Usage</span>
                        <span class="resource-value">@memoryUsage</span>
                    </div>
                    <div class="resource-bar">
                        <div class="resource-fill" style="width: 45%"></div>
                    </div>
                    <div class="resource-footer">45% of allocated</div>
                </div>

                <div class="resource-card">
                    <div class="resource-header">
                        <span class="resource-label">Cache Hit Rate</span>
                        <span class="resource-value">@cacheHitRate</span>
                    </div>
                    <div class="resource-bar">
                        <div class="resource-fill success" style="width: 87%"></div>
                    </div>
                    <div class="resource-footer">87% cache hits</div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .performance-metrics {
        height: 100%;
        display: flex;
        flex-direction: column;
        background: white;
    }

    .metrics-header {
        padding: 1.5rem;
        border-bottom: 1px solid #dee2e6;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .metrics-header h5 {
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .metrics-controls {
        display: flex;
        gap: 0.5rem;
    }

    .metrics-content {
        flex: 1;
        overflow-y: auto;
        padding: 1.5rem;
    }

    .metrics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .metric-card {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 12px;
        padding: 1.5rem;
        display: flex;
        gap: 1rem;
        transition: all 0.2s ease;
    }

    .metric-card:hover {
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        transform: translateY(-2px);
    }

    .metric-card.primary { border-left: 4px solid #667eea; }
    .metric-card.success { border-left: 4px solid #4caf50; }
    .metric-card.info { border-left: 4px solid #2196f3; }
    .metric-card.warning { border-left: 4px solid #ff9800; }

    .metric-icon {
        width: 3.5rem;
        height: 3.5rem;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.75rem;
    }

    .metric-card.primary .metric-icon {
        background: rgba(102, 126, 234, 0.1);
        color: #667eea;
    }

    .metric-card.success .metric-icon {
        background: rgba(76, 175, 80, 0.1);
        color: #4caf50;
    }

    .metric-card.info .metric-icon {
        background: rgba(33, 150, 243, 0.1);
        color: #2196f3;
    }

    .metric-card.warning .metric-icon {
        background: rgba(255, 152, 0, 0.1);
        color: #ff9800;
    }

    .metric-details {
        flex: 1;
    }

    .metric-label {
        font-size: 0.875rem;
        color: #6c757d;
        margin-bottom: 0.25rem;
    }

    .metric-value {
        font-size: 1.75rem;
        font-weight: 700;
        color: #212529;
        margin-bottom: 0.25rem;
    }

    .metric-change {
        font-size: 0.875rem;
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .metric-change.positive { color: #4caf50; }
    .metric-change.negative { color: #f44336; }
    .metric-change.neutral { color: #6c757d; }

    .charts-section {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .chart-card {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 12px;
        padding: 1.5rem;
    }

    .chart-header {
        margin-bottom: 1.5rem;
    }

    .chart-header h6 {
        margin: 0 0 0.25rem 0;
        font-weight: 600;
    }

    .chart-info {
        font-size: 0.875rem;
        color: #6c757d;
    }

    .chart-placeholder {
        padding: 1rem 0;
    }

    .chart-bars {
        display: flex;
        align-items: flex-end;
        gap: 0.5rem;
        height: 200px;
        margin-bottom: 0.5rem;
    }

    .bar {
        flex: 1;
        position: relative;
        min-height: 10px;
    }

    .bar-fill {
        position: absolute;
        bottom: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(180deg, #667eea 0%, #764ba2 100%);
        border-radius: 4px 4px 0 0;
        transition: all 0.3s ease;
    }

    .bar:hover .bar-fill {
        opacity: 0.8;
    }

    .chart-labels {
        display: flex;
        justify-content: space-between;
        font-size: 0.75rem;
        color: #6c757d;
    }

    .pie-chart {
        position: relative;
        width: 200px;
        height: 200px;
        margin: 0 auto 1rem;
    }

    .pie {
        width: 100%;
        height: 100%;
    }

    .pie-center {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
    }

    .pie-value {
        font-size: 2rem;
        font-weight: 700;
        color: #212529;
    }

    .pie-label {
        font-size: 0.875rem;
        color: #6c757d;
    }

    .pie-legend {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .legend-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .legend-color {
        width: 1rem;
        height: 1rem;
        border-radius: 2px;
    }

    .legend-color.success { background: #4caf50; }
    .legend-color.danger { background: #f44336; }

    .metrics-table-section {
        margin-bottom: 2rem;
    }

    .metrics-table-section h6 {
        margin-bottom: 1rem;
        font-weight: 600;
    }

    .metrics-table {
        width: 100%;
        border-collapse: collapse;
        background: white;
    }

    .metrics-table thead {
        background: #f8f9fa;
        border-bottom: 2px solid #dee2e6;
    }

    .metrics-table th {
        padding: 1rem;
        text-align: left;
        font-weight: 600;
        font-size: 0.875rem;
        color: #6c757d;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .metrics-table td {
        padding: 1rem;
        border-bottom: 1px solid #f1f3f5;
    }

    .metrics-table tbody tr:hover {
        background: #f8f9fa;
    }

    .node-name {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 600;
    }

    .node-type-badge {
        background: #e9ecef;
        color: #495057;
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .progress-bar {
        position: relative;
        width: 100px;
        height: 24px;
        background: #e9ecef;
        border-radius: 12px;
        overflow: hidden;
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #4caf50 0%, #66bb6a 100%);
        transition: width 0.3s ease;
    }

    .progress-text {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 0.75rem;
        font-weight: 600;
        color: #212529;
    }

    .error-count {
        background: #ffebee;
        color: #c62828;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-weight: 600;
        font-size: 0.875rem;
    }

    .resource-usage-section {
        margin-bottom: 2rem;
    }

    .resource-usage-section h6 {
        margin-bottom: 1rem;
        font-weight: 600;
    }

    .resource-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .resource-card {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 12px;
        padding: 1.5rem;
    }

    .resource-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .resource-label {
        font-size: 0.875rem;
        color: #6c757d;
        font-weight: 600;
    }

    .resource-value {
        font-size: 1.25rem;
        font-weight: 700;
        color: #212529;
    }

    .resource-bar {
        height: 8px;
        background: #e9ecef;
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 0.5rem;
    }

    .resource-fill {
        height: 100%;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        transition: width 0.3s ease;
    }

    .resource-fill.success {
        background: linear-gradient(90deg, #4caf50 0%, #66bb6a 100%);
    }

    .resource-footer {
        font-size: 0.875rem;
        color: #6c757d;
    }
</style>

@code {
    private string timeRange = "24h";
    private string avgExecutionTime = "2.3s";
    private string successRate = "95.2%";
    private string totalCost = "$12.45";
    private string totalExecutions = "1,247";
    private string apiTokensUsed = "234K";
    private string memoryUsage = "2.1 GB";
    private string cacheHitRate = "87%";

    private List<int> executionTimeBars = new() { 45, 67, 52, 89, 76, 58, 91, 73, 65, 82, 70, 95 };

    private List<NodeMetric> nodeMetrics = new()
    {
        new() { NodeName = "Start Node", NodeType = "Start", Executions = 1247, AvgTime = "12ms", SuccessRate = 100, Errors = 0, Cost = "$0.00" },
        new() { NodeName = "LLM Agent", NodeType = "LLMAgent", Executions = 1247, AvgTime = "1.8s", SuccessRate = 96, Errors = 50, Cost = "$8.32" },
        new() { NodeName = "Tool Agent", NodeType = "ToolAgent", Executions = 1186, AvgTime = "450ms", SuccessRate = 94, Errors = 71, Cost = "$2.15" },
        new() { NodeName = "Checkpoint", NodeType = "Checkpoint", Executions = 1186, AvgTime = "23ms", SuccessRate = 100, Errors = 0, Cost = "$0.00" },
        new() { NodeName = "End Node", NodeType = "End", Executions = 1115, AvgTime = "8ms", SuccessRate = 100, Errors = 0, Cost = "$0.00" }
    };

    private void RefreshMetrics()
    {
        // Simulate data refresh
        StateHasChanged();
    }

    private string GetNodeIcon(string type)
    {
        return type.ToLower() switch
        {
            "start" => "bi bi-play-circle-fill",
            "end" => "bi bi-stop-circle-fill",
            "llmagent" => "bi bi-robot",
            "toolagent" => "bi bi-tools",
            "checkpoint" => "bi bi-bookmark-fill",
            _ => "bi bi-circle-fill"
        };
    }

    private class NodeMetric
    {
        public string NodeName { get; set; } = string.Empty;
        public string NodeType { get; set; } = string.Empty;
        public int Executions { get; set; }
        public string AvgTime { get; set; } = string.Empty;
        public int SuccessRate { get; set; }
        public int Errors { get; set; }
        public string Cost { get; set; } = string.Empty;
    }
}


