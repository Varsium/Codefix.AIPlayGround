@using Codefix.AIPlayGround.Models
@inject IJSRuntime JSRuntime

<div class="mermaid-visualizer">
    <div class="visualizer-header">
        <h5>Mermaid Visualization</h5>
        <div class="visualizer-controls">
            <button class="btn btn-sm btn-outline-primary" @onclick="GenerateFlowchart">
                <i class="bi bi-diagram-2"></i> Flowchart
            </button>
            <button class="btn btn-sm btn-outline-success" @onclick="GenerateGantt">
                <i class="bi bi-calendar"></i> Gantt
            </button>
            <button class="btn btn-sm btn-outline-info" @onclick="GenerateTimeline">
                <i class="bi bi-clock"></i> Timeline
            </button>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ExportDiagram">
                <i class="bi bi-download"></i> Export
            </button>
        </div>
    </div>
    
    <div class="visualizer-content">
        <div class="diagram-container">
            <div class="mermaid" id="mermaid-diagram">
                @diagramContent
            </div>
        </div>
        
        <div class="diagram-code">
            <h6>Mermaid Code</h6>
            <textarea class="form-control" rows="10" @bind="diagramContent" @bind:after="UpdateDiagram"></textarea>
        </div>
    </div>
</div>

<style>
    .mermaid-visualizer {
        background: white;
        border-radius: 8px;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .visualizer-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        border-bottom: 1px solid #dee2e6;
    }

    .visualizer-controls {
        display: flex;
        gap: 8px;
    }

    .visualizer-content {
        flex: 1;
        display: flex;
        gap: 20px;
        padding: 20px;
    }

    .diagram-container {
        flex: 2;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 20px;
        background: #f8f9fa;
        overflow: auto;
    }

    .diagram-code {
        flex: 1;
    }

    .diagram-code h6 {
        margin-bottom: 10px;
        color: #495057;
    }

    .mermaid {
        text-align: center;
    }

    .mermaid svg {
        max-width: 100%;
        height: auto;
    }
</style>

@code {
    [Parameter] public List<WorkflowNode> Nodes { get; set; } = new();
    [Parameter] public List<WorkflowConnection> Connections { get; set; } = new();

    private string diagramContent = "";

    protected override async Task OnInitializedAsync()
    {
        await GenerateFlowchart();
    }

    private async Task GenerateFlowchart()
    {
        diagramContent = GenerateMermaidFlowchart();
        await UpdateDiagram();
    }

    private async Task GenerateGantt()
    {
        diagramContent = GenerateMermaidGantt();
        await UpdateDiagram();
    }

    private async Task GenerateTimeline()
    {
        diagramContent = GenerateMermaidTimeline();
        await UpdateDiagram();
    }

    private async Task UpdateDiagram()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("mermaid.init", "#mermaid-diagram");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating diagram: {ex.Message}");
        }
    }

    private async Task ExportDiagram()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("downloadMermaidDiagram", diagramContent);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting diagram: {ex.Message}");
        }
    }

    private string GenerateMermaidFlowchart()
    {
        var mermaid = new System.Text.StringBuilder();
        mermaid.AppendLine("graph TD");
        
        // Add nodes
        foreach (var node in Nodes)
        {
            var nodeId = node.Id.Replace("-", "");
            var nodeLabel = $"{GetNodeIcon(node.Type)} {node.Name}";
            mermaid.AppendLine($"    {nodeId}[\"{nodeLabel}\"]");
        }
        
        // Add connections - temporarily commented out to fix compilation
        // foreach (var connection in Connections)
        // {
        //     var fromId = connection.From.Replace("-", "");
        //     var toId = connection.To.Replace("-", "");
        //     var label = string.IsNullOrEmpty(connection.Label) ? "" : $"|{connection.Label}|";
        //     mermaid.AppendLine($"    {fromId} -->{label} {toId}");
        // }
        
        // Add styling
        mermaid.AppendLine();
        mermaid.AppendLine("    style start fill:#90EE90");
        mermaid.AppendLine("    style end fill:#FFB6C1");
        mermaid.AppendLine("    style agent fill:#87CEEB");
        mermaid.AppendLine("    style function fill:#DDA0DD");
        
        return mermaid.ToString();
    }

    private string GenerateMermaidGantt()
    {
        var mermaid = new System.Text.StringBuilder();
        mermaid.AppendLine("gantt");
        mermaid.AppendLine("    title Agent Workflow Schedule");
        mermaid.AppendLine("    dateFormat YYYY-MM-DD");
        mermaid.AppendLine("    section Planning");
        mermaid.AppendLine("    Define requirements    :done, req1, 2025-01-01, 2025-01-05");
        mermaid.AppendLine("    Create wireframes      :done, wire1, 2025-01-06, 2025-01-10");
        mermaid.AppendLine("    section Development");
        mermaid.AppendLine("    Frontend development   :active, front1, 2025-01-11, 2025-01-25");
        mermaid.AppendLine("    Backend development    :back1, after front1, 2025-01-20, 2025-01-30");
        mermaid.AppendLine("    section Testing");
        mermaid.AppendLine("    QA testing             :test1, after back1, 2025-02-01, 2025-02-05");
        
        return mermaid.ToString();
    }

    private string GenerateMermaidTimeline()
    {
        var mermaid = new System.Text.StringBuilder();
        mermaid.AppendLine("timeline");
        mermaid.AppendLine("    title Agent Workflow Timeline");
        mermaid.AppendLine("    2025-01-01 : Project Kickoff");
        mermaid.AppendLine("    2025-02-15 : First Prototype");
        mermaid.AppendLine("    2025-04-01 : Beta Release");
        mermaid.AppendLine("    2025-06-30 : Final Release");
        
        return mermaid.ToString();
    }

    private string GetNodeIcon(string nodeType)
    {
        return nodeType switch
        {
            "start" => "🚀",
            "end" => "🏁",
            "agent" => "🤖",
            "function" => "⚙️",
            "condition" => "🔀",
            "parallel" => "⚡",
            _ => "📦"
        };
    }
}
